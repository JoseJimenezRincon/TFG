-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aStar is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xStart : IN STD_LOGIC_VECTOR (31 downto 0);
    yStart : IN STD_LOGIC_VECTOR (31 downto 0);
    xFinish : IN STD_LOGIC_VECTOR (31 downto 0);
    yFinish : IN STD_LOGIC_VECTOR (31 downto 0);
    map_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    map_r_ce0 : OUT STD_LOGIC;
    map_r_we0 : OUT STD_LOGIC;
    map_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    map_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aStar is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aStar,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.480000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=50,HLS_SYN_DSP=0,HLS_SYN_FF=1276,HLS_SYN_LUT=2438}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_900 : STD_LOGIC_VECTOR (11 downto 0) := "100100000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_48 : BOOLEAN;
    signal openNodes_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal openNodes_ce0 : STD_LOGIC;
    signal openNodes_we0 : STD_LOGIC;
    signal openNodes_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal openNodes_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_coordinates_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_coordinates_0_ce0 : STD_LOGIC;
    signal node_coordinates_0_we0 : STD_LOGIC;
    signal node_coordinates_0_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal node_coordinates_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal node_coordinates_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_coordinates_1_ce0 : STD_LOGIC;
    signal node_coordinates_1_we0 : STD_LOGIC;
    signal node_coordinates_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_coordinates_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_visited_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_visited_ce0 : STD_LOGIC;
    signal node_visited_we0 : STD_LOGIC;
    signal node_visited_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_visited_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_father_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_father_ce0 : STD_LOGIC;
    signal node_father_we0 : STD_LOGIC;
    signal node_father_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_father_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_cost_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_cost_ce0 : STD_LOGIC;
    signal node_cost_we0 : STD_LOGIC;
    signal node_cost_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_cost_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_heuristic_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_heuristic_ce0 : STD_LOGIC;
    signal node_heuristic_we0 : STD_LOGIC;
    signal node_heuristic_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_costPlusHeuristic_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_costPlusHeuristic_ce0 : STD_LOGIC;
    signal node_costPlusHeuristic_we0 : STD_LOGIC;
    signal node_costPlusHeuristic_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_costPlusHeuristic_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal adjacentPosition_2_ce0 : STD_LOGIC;
    signal adjacentPosition_2_we0 : STD_LOGIC;
    signal adjacentPosition_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal adjacentPosition_2_ce1 : STD_LOGIC;
    signal adjacentPosition_2_we1 : STD_LOGIC;
    signal adjacentPosition_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal adjacentPosition_0_ce0 : STD_LOGIC;
    signal adjacentPosition_0_we0 : STD_LOGIC;
    signal adjacentPosition_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal adjacentPosition_0_ce1 : STD_LOGIC;
    signal adjacentPosition_0_we1 : STD_LOGIC;
    signal adjacentPosition_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal adjacentPosition_1_ce0 : STD_LOGIC;
    signal adjacentPosition_1_we0 : STD_LOGIC;
    signal adjacentPosition_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal adjacentPosition_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal adjacentPosition_1_ce1 : STD_LOGIC;
    signal adjacentPosition_1_we1 : STD_LOGIC;
    signal adjacentPosition_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_196 : BOOLEAN;
    signal grp_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_206 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal grp_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_783_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_reg_1304 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal i_1_fu_793_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_1314 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_cond_i_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal position_5_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal position_5_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_833_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal i_2_fu_916_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1347 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_268 : BOOLEAN;
    signal tmp_17_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_1352 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1363 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1377 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal tmp_i1_fu_932_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_303 : BOOLEAN;
    signal grp_aStar_calculateCost_fu_696_ap_done : STD_LOGIC;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_316 : BOOLEAN;
    signal positionBestOption_i_cast_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal positionBestOption_i_cast_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_325 : BOOLEAN;
    signal i_4_fu_971_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_4_reg_1411 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i1_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal finalPosition_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal finalPosition_reg_1426 : STD_LOGIC_VECTOR (31 downto 0);
    signal positionBestOption_2_i_fu_1020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_347 : BOOLEAN;
    signal bestOption_2_i_fu_1028_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_coordinates_0_addr_1_reg_1442 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_358 : BOOLEAN;
    signal node_coordinates_1_addr_reg_1447 : STD_LOGIC_VECTOR (11 downto 0);
    signal node_coordinates_0_load_reg_1452 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_368 : BOOLEAN;
    signal node_coordinates_1_load_reg_1457 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_fu_1042_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_378 : BOOLEAN;
    signal i_3_fu_1052_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_1470 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal tmp_21_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_1475 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1063_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1486 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond1_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_406 : BOOLEAN;
    signal tmp_i5_fu_1081_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i5_reg_1514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_420 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_429 : BOOLEAN;
    signal positionBestOption_i11_cast_fu_1110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal positionBestOption_i11_cast_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_438 : BOOLEAN;
    signal i_5_fu_1120_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_5_reg_1534 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i2_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal positionBestOption_2_i1_fu_1164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_456 : BOOLEAN;
    signal bestOption_2_i1_fu_1172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1562 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_467 : BOOLEAN;
    signal position_reg_1573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_477 : BOOLEAN;
    signal tmp_26_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1267_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_reg_1591 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_493 : BOOLEAN;
    signal grp_aStar_adjacentNodes_fu_684_ap_start : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_ap_done : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_ap_idle : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_ap_ready : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_y : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce0 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we0 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce1 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we1 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce0 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we0 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce1 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we1 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce0 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we0 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce1 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we1 : STD_LOGIC;
    signal grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_calculateCost_fu_696_ap_start : STD_LOGIC;
    signal grp_aStar_calculateCost_fu_696_ap_idle : STD_LOGIC;
    signal grp_aStar_calculateCost_fu_696_ap_ready : STD_LOGIC;
    signal grp_aStar_calculateCost_fu_696_i : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aStar_calculateCost_fu_696_position : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_calculateCost_fu_696_node_father_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_aStar_calculateCost_fu_696_node_father_ce0 : STD_LOGIC;
    signal grp_aStar_calculateCost_fu_696_node_father_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_calculateCost_fu_696_node_cost_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_aStar_calculateCost_fu_696_node_cost_ce0 : STD_LOGIC;
    signal grp_aStar_calculateCost_fu_696_node_cost_we0 : STD_LOGIC;
    signal grp_aStar_calculateCost_fu_696_node_cost_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aStar_calculateCost_fu_696_node_cost_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_i_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_549 : BOOLEAN;
    signal i_i_reg_558 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_570 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_562 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_572 : BOOLEAN;
    signal positionBestOption_reg_582 : STD_LOGIC_VECTOR (11 downto 0);
    signal position_3_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestOption_i_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal position3_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_627 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_598 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_606 : BOOLEAN;
    signal positionBestOption_1_reg_639 : STD_LOGIC_VECTOR (11 downto 0);
    signal position_4_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestOption_i1_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal position_1_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_622 : BOOLEAN;
    signal grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_639 : BOOLEAN;
    signal tmp_35_cast_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_visited_addr_1_gep_fu_198_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_1228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_1273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal positionFather_1_fu_1072_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_954_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i1_fu_1103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_844_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_855_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_851_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_862_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_866_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_840_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_34_cast_fu_872_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_fu_876_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_775_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i9_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal positionBestOption_positionBes_fu_1005_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestOption_1_bestOption_i_fu_1012_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1068_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_7_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_1097_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal positionBestOption_positionBes_1_fu_1149_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bestOption_1_bestOption_i1_fu_1156_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1205_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_1197_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_1208_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_1191_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_30_fu_1216_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_31_fu_1222_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_1237_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_1249_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_1257_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_1245_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_fu_1261_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_1233_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component aStar_adjacentNodes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        adjacentPosition_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        adjacentPosition_2_ce0 : OUT STD_LOGIC;
        adjacentPosition_2_we0 : OUT STD_LOGIC;
        adjacentPosition_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        adjacentPosition_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        adjacentPosition_2_ce1 : OUT STD_LOGIC;
        adjacentPosition_2_we1 : OUT STD_LOGIC;
        adjacentPosition_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        adjacentPosition_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        adjacentPosition_0_ce0 : OUT STD_LOGIC;
        adjacentPosition_0_we0 : OUT STD_LOGIC;
        adjacentPosition_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        adjacentPosition_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        adjacentPosition_0_ce1 : OUT STD_LOGIC;
        adjacentPosition_0_we1 : OUT STD_LOGIC;
        adjacentPosition_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        adjacentPosition_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        adjacentPosition_1_ce0 : OUT STD_LOGIC;
        adjacentPosition_1_we0 : OUT STD_LOGIC;
        adjacentPosition_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        adjacentPosition_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        adjacentPosition_1_ce1 : OUT STD_LOGIC;
        adjacentPosition_1_we1 : OUT STD_LOGIC;
        adjacentPosition_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aStar_calculateCost IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (3 downto 0);
        position : IN STD_LOGIC_VECTOR (31 downto 0);
        node_father_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        node_father_ce0 : OUT STD_LOGIC;
        node_father_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        node_cost_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        node_cost_ce0 : OUT STD_LOGIC;
        node_cost_we0 : OUT STD_LOGIC;
        node_cost_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        node_cost_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aStar_openNodes IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component aStar_node_coordinates_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component aStar_node_coordinates_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aStar_node_heuristic IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aStar_adjacentPosition_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    openNodes_U : component aStar_openNodes
    generic map (
        DataWidth => 1,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => openNodes_address0,
        ce0 => openNodes_ce0,
        we0 => openNodes_we0,
        d0 => openNodes_d0,
        q0 => openNodes_q0);

    node_coordinates_0_U : component aStar_node_coordinates_0
    generic map (
        DataWidth => 6,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_coordinates_0_address0,
        ce0 => node_coordinates_0_ce0,
        we0 => node_coordinates_0_we0,
        d0 => node_coordinates_0_d0,
        q0 => node_coordinates_0_q0);

    node_coordinates_1_U : component aStar_node_coordinates_1
    generic map (
        DataWidth => 32,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_coordinates_1_address0,
        ce0 => node_coordinates_1_ce0,
        we0 => node_coordinates_1_we0,
        d0 => node_coordinates_1_d0,
        q0 => node_coordinates_1_q0);

    node_visited_U : component aStar_openNodes
    generic map (
        DataWidth => 1,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_visited_address0,
        ce0 => node_visited_ce0,
        we0 => node_visited_we0,
        d0 => node_visited_d0,
        q0 => node_visited_q0);

    node_father_U : component aStar_node_coordinates_1
    generic map (
        DataWidth => 32,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_father_address0,
        ce0 => node_father_ce0,
        we0 => node_father_we0,
        d0 => node_father_d0,
        q0 => node_father_q0);

    node_cost_U : component aStar_node_coordinates_1
    generic map (
        DataWidth => 32,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_cost_address0,
        ce0 => node_cost_ce0,
        we0 => node_cost_we0,
        d0 => node_cost_d0,
        q0 => node_cost_q0);

    node_heuristic_U : component aStar_node_heuristic
    generic map (
        DataWidth => 32,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_heuristic_address0,
        ce0 => node_heuristic_ce0,
        we0 => node_heuristic_we0,
        d0 => node_heuristic_d0);

    node_costPlusHeuristic_U : component aStar_node_coordinates_1
    generic map (
        DataWidth => 32,
        AddressRange => 2304,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_costPlusHeuristic_address0,
        ce0 => node_costPlusHeuristic_ce0,
        we0 => node_costPlusHeuristic_we0,
        d0 => node_costPlusHeuristic_d0,
        q0 => node_costPlusHeuristic_q0);

    adjacentPosition_2_U : component aStar_adjacentPosition_2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => adjacentPosition_2_address0,
        ce0 => adjacentPosition_2_ce0,
        we0 => adjacentPosition_2_we0,
        d0 => adjacentPosition_2_d0,
        q0 => adjacentPosition_2_q0,
        address1 => adjacentPosition_2_address1,
        ce1 => adjacentPosition_2_ce1,
        we1 => adjacentPosition_2_we1,
        d1 => adjacentPosition_2_d1);

    adjacentPosition_0_U : component aStar_adjacentPosition_2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => adjacentPosition_0_address0,
        ce0 => adjacentPosition_0_ce0,
        we0 => adjacentPosition_0_we0,
        d0 => adjacentPosition_0_d0,
        q0 => adjacentPosition_0_q0,
        address1 => adjacentPosition_0_address1,
        ce1 => adjacentPosition_0_ce1,
        we1 => adjacentPosition_0_we1,
        d1 => adjacentPosition_0_d1);

    adjacentPosition_1_U : component aStar_adjacentPosition_2
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => adjacentPosition_1_address0,
        ce0 => adjacentPosition_1_ce0,
        we0 => adjacentPosition_1_we0,
        d0 => adjacentPosition_1_d0,
        q0 => adjacentPosition_1_q0,
        address1 => adjacentPosition_1_address1,
        ce1 => adjacentPosition_1_ce1,
        we1 => adjacentPosition_1_we1,
        d1 => adjacentPosition_1_d1);

    grp_aStar_adjacentNodes_fu_684 : component aStar_adjacentNodes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aStar_adjacentNodes_fu_684_ap_start,
        ap_done => grp_aStar_adjacentNodes_fu_684_ap_done,
        ap_idle => grp_aStar_adjacentNodes_fu_684_ap_idle,
        ap_ready => grp_aStar_adjacentNodes_fu_684_ap_ready,
        x => grp_aStar_adjacentNodes_fu_684_x,
        y => grp_aStar_adjacentNodes_fu_684_y,
        adjacentPosition_2_address0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address0,
        adjacentPosition_2_ce0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce0,
        adjacentPosition_2_we0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we0,
        adjacentPosition_2_d0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_d0,
        adjacentPosition_2_address1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address1,
        adjacentPosition_2_ce1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce1,
        adjacentPosition_2_we1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we1,
        adjacentPosition_2_d1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_d1,
        adjacentPosition_0_address0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address0,
        adjacentPosition_0_ce0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce0,
        adjacentPosition_0_we0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we0,
        adjacentPosition_0_d0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_d0,
        adjacentPosition_0_address1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address1,
        adjacentPosition_0_ce1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce1,
        adjacentPosition_0_we1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we1,
        adjacentPosition_0_d1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_d1,
        adjacentPosition_1_address0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address0,
        adjacentPosition_1_ce0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce0,
        adjacentPosition_1_we0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we0,
        adjacentPosition_1_d0 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_d0,
        adjacentPosition_1_address1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address1,
        adjacentPosition_1_ce1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce1,
        adjacentPosition_1_we1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we1,
        adjacentPosition_1_d1 => grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_d1);

    grp_aStar_calculateCost_fu_696 : component aStar_calculateCost
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aStar_calculateCost_fu_696_ap_start,
        ap_done => grp_aStar_calculateCost_fu_696_ap_done,
        ap_idle => grp_aStar_calculateCost_fu_696_ap_idle,
        ap_ready => grp_aStar_calculateCost_fu_696_ap_ready,
        i => grp_aStar_calculateCost_fu_696_i,
        position => grp_aStar_calculateCost_fu_696_position,
        node_father_address0 => grp_aStar_calculateCost_fu_696_node_father_address0,
        node_father_ce0 => grp_aStar_calculateCost_fu_696_node_father_ce0,
        node_father_q0 => grp_aStar_calculateCost_fu_696_node_father_q0,
        node_cost_address0 => grp_aStar_calculateCost_fu_696_node_cost_address0,
        node_cost_ce0 => grp_aStar_calculateCost_fu_696_node_cost_ce0,
        node_cost_we0 => grp_aStar_calculateCost_fu_696_node_cost_we0,
        node_cost_d0 => grp_aStar_calculateCost_fu_696_node_cost_d0,
        node_cost_q0 => grp_aStar_calculateCost_fu_696_node_cost_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg assign process. --
    grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i_fu_787_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
                    grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aStar_adjacentNodes_fu_684_ap_ready)) then 
                    grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg assign process. --
    grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
                    grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aStar_calculateCost_fu_696_ap_ready)) then 
                    grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- bestOption_i1_reg_663 assign process. --
    bestOption_i1_reg_663_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond_fu_1046_p2)))) then 
                bestOption_i1_reg_663 <= ap_const_lv32_7FFFFFFF;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
                bestOption_i1_reg_663 <= bestOption_2_i1_fu_1172_p3;
            end if; 
        end if;
    end process;

    -- bestOption_i_reg_605 assign process. --
    bestOption_i_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_910_p2)))) then 
                bestOption_i_reg_605 <= ap_const_lv32_7FFFFFFF;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                bestOption_i_reg_605 <= bestOption_2_i_fu_1028_p3;
            end if; 
        end if;
    end process;

    -- i1_reg_627 assign process. --
    i1_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
                i1_reg_627 <= i_3_reg_1470;
            elsif ((not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
                i1_reg_627 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_i_reg_558 assign process. --
    i_i_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_i_reg_558 <= i_1_reg_1314;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_i_reg_558 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- i_reg_570 assign process. --
    i_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                i_reg_570 <= i_2_reg_1347;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done)))) then 
                i_reg_570 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- position3_reg_617 assign process. --
    position3_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and (ap_const_lv1_0 = tmp_22_fu_1138_p2) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2)))) then 
                position3_reg_617 <= position_4_reg_650;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2)))) then 
                position3_reg_617 <= position_3_reg_593;
            end if; 
        end if;
    end process;

    -- positionBestOption_1_reg_639 assign process. --
    positionBestOption_1_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond_fu_1046_p2)))) then 
                positionBestOption_1_reg_639 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
                positionBestOption_1_reg_639 <= i_5_reg_1534;
            end if; 
        end if;
    end process;

    -- positionBestOption_reg_582 assign process. --
    positionBestOption_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond1_fu_910_p2)))) then 
                positionBestOption_reg_582 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                positionBestOption_reg_582 <= i_4_reg_1411;
            end if; 
        end if;
    end process;

    -- position_1_reg_675 assign process. --
    position_1_reg_675_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2)) and not((ap_const_lv1_0 = tmp_22_fu_1138_p2)))) then 
                position_1_reg_675 <= finalPosition_reg_1426;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                position_1_reg_675 <= position_reg_1573;
            end if; 
        end if;
    end process;

    -- y_i_reg_546 assign process. --
    y_i_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                y_i_reg_546 <= y_1_reg_1330;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                y_i_reg_546 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                    extLd_reg_1462(5 downto 0) <= extLd_fu_1042_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2)))) then
                finalPosition_reg_1426 <= finalPosition_fu_994_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_1314 <= i_1_fu_793_p2;
                x_reg_1304 <= x_fu_783_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                i_2_reg_1347 <= i_2_fu_916_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                i_3_reg_1470 <= i_3_fu_1052_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_4_reg_1411 <= i_4_fu_971_p2;
                    positionBestOption_i_cast_reg_1403(11 downto 0) <= positionBestOption_i_cast_fu_961_p1(11 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                i_5_reg_1534 <= i_5_fu_1120_p2;
                    positionBestOption_i11_cast_reg_1526(11 downto 0) <= positionBestOption_i11_cast_fu_1110_p1(11 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                node_coordinates_0_addr_1_reg_1442 <= tmp_20_fu_1036_p1(12 - 1 downto 0);
                node_coordinates_1_addr_reg_1447 <= tmp_20_fu_1036_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                node_coordinates_0_load_reg_1452 <= node_coordinates_0_q0;
                node_coordinates_1_load_reg_1457 <= node_coordinates_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                or_cond1_reg_1500 <= grp_fu_737_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_i_fu_787_p2 = ap_const_lv1_0))) then
                or_cond_i_reg_1319 <= or_cond_i_fu_811_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                or_cond_reg_1377 <= grp_fu_737_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                position_3_reg_593 <= positionBestOption_2_i_fu_1020_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                position_4_reg_650 <= positionBestOption_2_i1_fu_1164_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i_fu_787_p2 = ap_const_lv1_0)))) then
                position_5_reg_1324 <= position_5_fu_822_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                position_reg_1573 <= node_father_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then
                reg_718 <= adjacentPosition_2_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then
                reg_723 <= grp_fu_708_p2;
                reg_727 <= grp_fu_713_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond1_fu_910_p2))) then
                    tmp_17_reg_1352(3 downto 0) <= tmp_17_fu_922_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_18_reg_1363 <= tmp_18_fu_927_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond_fu_1046_p2))) then
                    tmp_21_reg_1475(3 downto 0) <= tmp_21_fu_1058_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_23_reg_1486 <= tmp_23_fu_1063_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                tmp_25_reg_1562 <= tmp_25_fu_1180_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                tmp_33_reg_1591 <= tmp_33_fu_1267_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_aStar_calculateCost_fu_696_ap_done)))) then
                tmp_i1_reg_1391 <= tmp_i1_fu_932_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                tmp_i5_reg_1514 <= tmp_i5_fu_1081_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                y_1_reg_1330 <= y_1_fu_833_p3;
            end if;
        end if;
    end process;
    tmp_17_reg_1352(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    positionBestOption_i_cast_reg_1403(31 downto 12) <= "00000000000000000000";
    extLd_reg_1462(31 downto 6) <= "00000000000000000000000000";
    tmp_21_reg_1475(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    positionBestOption_i11_cast_reg_1526(31 downto 12) <= "00000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_787_p2, exitcond1_fu_910_p2, grp_fu_737_p2, grp_aStar_calculateCost_fu_696_ap_done, exitcond_i1_fu_965_p2, exitcond_fu_1046_p2, exitcond_i2_fu_1114_p2, tmp_26_fu_1185_p2, grp_aStar_adjacentNodes_fu_684_ap_done, tmp_22_fu_1138_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_i_fu_787_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_910_p2))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = grp_fu_737_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = grp_aStar_calculateCost_fu_696_ap_done))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = exitcond_i1_fu_965_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond_fu_1046_p2))) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = grp_fu_737_p2))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not((ap_const_logic_0 = grp_aStar_calculateCost_fu_696_ap_done))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st27_fsm_26 => 
                if ((not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2)) and not((ap_const_lv1_0 = tmp_22_fu_1138_p2)))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                elsif (((ap_const_lv1_0 = tmp_22_fu_1138_p2) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                if (not((ap_const_lv1_0 = tmp_26_fu_1185_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- adjacentPosition_0_address0 assign process. --
    adjacentPosition_0_address0_assign_proc : process(tmp_17_reg_1352, ap_sig_cseq_ST_st8_fsm_7, tmp_21_reg_1475, ap_sig_cseq_ST_st21_fsm_20, grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            adjacentPosition_0_address0 <= tmp_21_reg_1475(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            adjacentPosition_0_address0 <= tmp_17_reg_1352(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_0_address0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address0;
        else 
            adjacentPosition_0_address0 <= "XXX";
        end if; 
    end process;

    adjacentPosition_0_address1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_address1;

    -- adjacentPosition_0_ce0 assign process. --
    adjacentPosition_0_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st21_fsm_20, grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            adjacentPosition_0_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_0_ce0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce0;
        else 
            adjacentPosition_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_0_ce1 assign process. --
    adjacentPosition_0_ce1_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_0_ce1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_ce1;
        else 
            adjacentPosition_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    adjacentPosition_0_d0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_d0;
    adjacentPosition_0_d1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_d1;

    -- adjacentPosition_0_we0 assign process. --
    adjacentPosition_0_we0_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_0_we0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we0;
        else 
            adjacentPosition_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_0_we1 assign process. --
    adjacentPosition_0_we1_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_0_we1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_0_we1;
        else 
            adjacentPosition_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_address0 assign process. --
    adjacentPosition_1_address0_assign_proc : process(tmp_17_reg_1352, ap_sig_cseq_ST_st8_fsm_7, tmp_21_reg_1475, ap_sig_cseq_ST_st21_fsm_20, grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            adjacentPosition_1_address0 <= tmp_21_reg_1475(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            adjacentPosition_1_address0 <= tmp_17_reg_1352(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_1_address0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address0;
        else 
            adjacentPosition_1_address0 <= "XXX";
        end if; 
    end process;

    adjacentPosition_1_address1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_address1;

    -- adjacentPosition_1_ce0 assign process. --
    adjacentPosition_1_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st21_fsm_20, grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            adjacentPosition_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_1_ce0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce0;
        else 
            adjacentPosition_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_ce1 assign process. --
    adjacentPosition_1_ce1_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_1_ce1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_ce1;
        else 
            adjacentPosition_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    adjacentPosition_1_d0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_d0;
    adjacentPosition_1_d1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_d1;

    -- adjacentPosition_1_we0 assign process. --
    adjacentPosition_1_we0_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_1_we0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we0;
        else 
            adjacentPosition_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_we1 assign process. --
    adjacentPosition_1_we1_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_1_we1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_1_we1;
        else 
            adjacentPosition_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_address0 assign process. --
    adjacentPosition_2_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_17_fu_922_p1, ap_sig_cseq_ST_st19_fsm_18, tmp_21_fu_1058_p1, grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            adjacentPosition_2_address0 <= tmp_21_fu_1058_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            adjacentPosition_2_address0 <= tmp_17_fu_922_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_address0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address0;
        else 
            adjacentPosition_2_address0 <= "XXX";
        end if; 
    end process;

    adjacentPosition_2_address1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_address1;

    -- adjacentPosition_2_ce0 assign process. --
    adjacentPosition_2_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st19_fsm_18, grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            adjacentPosition_2_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_ce0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce0;
        else 
            adjacentPosition_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_ce1 assign process. --
    adjacentPosition_2_ce1_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_ce1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_ce1;
        else 
            adjacentPosition_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    adjacentPosition_2_d0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_d0;
    adjacentPosition_2_d1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_d1;

    -- adjacentPosition_2_we0 assign process. --
    adjacentPosition_2_we0_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_we0 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we0;
        else 
            adjacentPosition_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_we1 assign process. --
    adjacentPosition_2_we1_assign_proc : process(grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_we1 <= grp_aStar_adjacentNodes_fu_684_adjacentPosition_2_we1;
        else 
            adjacentPosition_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, tmp_26_fu_1185_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = tmp_26_fu_1185_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, tmp_26_fu_1185_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = tmp_26_fu_1185_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_196 assign process. --
    ap_sig_bdd_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_196 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_206 assign process. --
    ap_sig_bdd_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_206 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_257 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_268 assign process. --
    ap_sig_bdd_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_268 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_303 assign process. --
    ap_sig_bdd_303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_303 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_316 assign process. --
    ap_sig_bdd_316_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_316 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_325 assign process. --
    ap_sig_bdd_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_325 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_347 assign process. --
    ap_sig_bdd_347_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_347 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_358 assign process. --
    ap_sig_bdd_358_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_358 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_368 assign process. --
    ap_sig_bdd_368_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_368 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_378 assign process. --
    ap_sig_bdd_378_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_378 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_387 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_406 assign process. --
    ap_sig_bdd_406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_406 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_420 assign process. --
    ap_sig_bdd_420_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_420 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_429 assign process. --
    ap_sig_bdd_429_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_429 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_438 assign process. --
    ap_sig_bdd_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_438 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_456 assign process. --
    ap_sig_bdd_456_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_456 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_467 assign process. --
    ap_sig_bdd_467_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_467 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_477 assign process. --
    ap_sig_bdd_477_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_477 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_48 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_493 assign process. --
    ap_sig_bdd_493_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_493 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_549 assign process. --
    ap_sig_bdd_549_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_549 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_562 assign process. --
    ap_sig_bdd_562_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_562 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_572 assign process. --
    ap_sig_bdd_572_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_572 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_598 assign process. --
    ap_sig_bdd_598_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_598 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_606 assign process. --
    ap_sig_bdd_606_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_606 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_622 assign process. --
    ap_sig_bdd_622_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_622 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_639 assign process. --
    ap_sig_bdd_639_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_639 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_303)
    begin
        if (ap_sig_bdd_303) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_316)
    begin
        if (ap_sig_bdd_316) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_572)
    begin
        if (ap_sig_bdd_572) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_325)
    begin
        if (ap_sig_bdd_325) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_347)
    begin
        if (ap_sig_bdd_347) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_358)
    begin
        if (ap_sig_bdd_358) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_368)
    begin
        if (ap_sig_bdd_368) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_378)
    begin
        if (ap_sig_bdd_378) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_598)
    begin
        if (ap_sig_bdd_598) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_387)
    begin
        if (ap_sig_bdd_387) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_48)
    begin
        if (ap_sig_bdd_48) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_196)
    begin
        if (ap_sig_bdd_196) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_406)
    begin
        if (ap_sig_bdd_406) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_420)
    begin
        if (ap_sig_bdd_420) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_639)
    begin
        if (ap_sig_bdd_639) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_429)
    begin
        if (ap_sig_bdd_429) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_606)
    begin
        if (ap_sig_bdd_606) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_438)
    begin
        if (ap_sig_bdd_438) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_456)
    begin
        if (ap_sig_bdd_456) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_467)
    begin
        if (ap_sig_bdd_467) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_477)
    begin
        if (ap_sig_bdd_477) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_493)
    begin
        if (ap_sig_bdd_493) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_622)
    begin
        if (ap_sig_bdd_622) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_257)
    begin
        if (ap_sig_bdd_257) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_549)
    begin
        if (ap_sig_bdd_549) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_562)
    begin
        if (ap_sig_bdd_562) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_268)
    begin
        if (ap_sig_bdd_268) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_206)
    begin
        if (ap_sig_bdd_206) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bestOption_1_bestOption_i1_fu_1156_p3 <= 
        node_costPlusHeuristic_q0 when (tmp_8_i1_fu_1143_p2(0) = '1') else 
        bestOption_i1_reg_663;
    bestOption_1_bestOption_i_fu_1012_p3 <= 
        node_costPlusHeuristic_q0 when (tmp_8_i9_fu_999_p2(0) = '1') else 
        bestOption_i_reg_605;
    bestOption_2_i1_fu_1172_p3 <= 
        bestOption_i1_reg_663 when (openNodes_q0(0) = '1') else 
        bestOption_1_bestOption_i1_fu_1156_p3;
    bestOption_2_i_fu_1028_p3 <= 
        bestOption_i_reg_605 when (openNodes_q0(0) = '1') else 
        bestOption_1_bestOption_i_fu_1012_p3;
    exitcond1_fu_910_p2 <= "1" when (i_reg_570 = ap_const_lv4_8) else "0";
    exitcond_fu_1046_p2 <= "1" when (i1_reg_627 = ap_const_lv4_8) else "0";
    exitcond_i1_fu_965_p2 <= "1" when (positionBestOption_reg_582 = ap_const_lv12_900) else "0";
    exitcond_i2_fu_1114_p2 <= "1" when (positionBestOption_1_reg_639 = ap_const_lv12_900) else "0";
    exitcond_i_fu_787_p2 <= "1" when (i_i_reg_558 = ap_const_lv12_900) else "0";
    extLd_fu_1042_p1 <= std_logic_vector(resize(unsigned(node_coordinates_0_load_reg_1452),32));
    finalPosition_fu_994_p2 <= std_logic_vector(unsigned(xFinish) + unsigned(tmp_2_fu_989_p2));
    grp_aStar_adjacentNodes_fu_684_ap_start <= grp_aStar_adjacentNodes_fu_684_ap_start_ap_start_reg;

    -- grp_aStar_adjacentNodes_fu_684_x assign process. --
    grp_aStar_adjacentNodes_fu_684_x_assign_proc : process(xStart, extLd_reg_1462, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_aStar_adjacentNodes_fu_684_x <= extLd_reg_1462;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_aStar_adjacentNodes_fu_684_x <= xStart;
        else 
            grp_aStar_adjacentNodes_fu_684_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_aStar_adjacentNodes_fu_684_y assign process. --
    grp_aStar_adjacentNodes_fu_684_y_assign_proc : process(yStart, node_coordinates_1_load_reg_1457, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_aStar_adjacentNodes_fu_684_y <= node_coordinates_1_load_reg_1457;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_aStar_adjacentNodes_fu_684_y <= yStart;
        else 
            grp_aStar_adjacentNodes_fu_684_y <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_aStar_calculateCost_fu_696_ap_start <= grp_aStar_calculateCost_fu_696_ap_start_ap_start_reg;

    -- grp_aStar_calculateCost_fu_696_i assign process. --
    grp_aStar_calculateCost_fu_696_i_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, i_reg_570, i1_reg_627, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_aStar_calculateCost_fu_696_i <= i1_reg_627;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_aStar_calculateCost_fu_696_i <= i_reg_570;
        else 
            grp_aStar_calculateCost_fu_696_i <= "XXXX";
        end if; 
    end process;

    grp_aStar_calculateCost_fu_696_node_cost_q0 <= node_cost_q0;
    grp_aStar_calculateCost_fu_696_node_father_q0 <= node_father_q0;
    grp_aStar_calculateCost_fu_696_position <= reg_718;
    grp_fu_708_p2 <= std_logic_vector(unsigned(xFinish) - unsigned(adjacentPosition_0_q0));
    grp_fu_713_p2 <= std_logic_vector(unsigned(yFinish) - unsigned(adjacentPosition_1_q0));
    grp_fu_731_p2 <= "1" when (reg_718 = ap_const_lv32_FFFFFFFF) else "0";
    grp_fu_737_p2 <= (node_visited_q0 or grp_fu_731_p2);
    grp_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_723));
    grp_fu_749_p2 <= "1" when (signed(reg_723) > signed(ap_const_lv32_0)) else "0";
    grp_fu_755_p3 <= 
        reg_723 when (grp_fu_749_p2(0) = '1') else 
        grp_fu_743_p2;
    grp_fu_763_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_727));
    grp_fu_769_p2 <= "1" when (signed(reg_727) > signed(ap_const_lv32_0)) else "0";
    grp_fu_775_p3 <= 
        reg_727 when (grp_fu_769_p2(0) = '1') else 
        grp_fu_763_p2;
    i_1_fu_793_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(i_i_reg_558));
    i_2_fu_916_p2 <= std_logic_vector(unsigned(i_reg_570) + unsigned(ap_const_lv4_1));
    i_3_fu_1052_p2 <= std_logic_vector(unsigned(i1_reg_627) + unsigned(ap_const_lv4_1));
    i_4_fu_971_p2 <= std_logic_vector(unsigned(positionBestOption_reg_582) + unsigned(ap_const_lv12_1));
    i_5_fu_1120_p2 <= std_logic_vector(unsigned(positionBestOption_1_reg_639) + unsigned(ap_const_lv12_1));

    -- map_r_address0 assign process. --
    map_r_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st32_fsm_31, tmp_35_cast_fu_882_p1, tmp_45_cast_fu_1228_p1, tmp_49_cast_fu_1273_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            map_r_address0 <= tmp_49_cast_fu_1273_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            map_r_address0 <= tmp_45_cast_fu_1228_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            map_r_address0 <= tmp_35_cast_fu_882_p1(12 - 1 downto 0);
        else 
            map_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- map_r_ce0 assign process. --
    map_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st32_fsm_31)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then 
            map_r_ce0 <= ap_const_logic_1;
        else 
            map_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- map_r_d0 assign process. --
    map_r_d0_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st32_fsm_31)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            map_r_d0 <= ap_const_lv32_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            map_r_d0 <= ap_const_lv32_4;
        else 
            map_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- map_r_we0 assign process. --
    map_r_we0_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29, tmp_26_fu_1185_p2, ap_sig_cseq_ST_st32_fsm_31)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = tmp_26_fu_1185_p2))))) then 
            map_r_we0 <= ap_const_logic_1;
        else 
            map_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_coordinates_0_address0 assign process. --
    node_coordinates_0_address0_assign_proc : process(node_coordinates_0_addr_1_reg_1442, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st21_fsm_20, tmp_25_reg_1562, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st4_fsm_3, tmp_2_i_fu_887_p1, tmp_20_fu_1036_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            node_coordinates_0_address0 <= tmp_2_i_fu_887_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            node_coordinates_0_address0 <= tmp_25_reg_1562(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            node_coordinates_0_address0 <= node_coordinates_0_addr_1_reg_1442;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            node_coordinates_0_address0 <= tmp_20_fu_1036_p1(12 - 1 downto 0);
        else 
            node_coordinates_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_coordinates_0_ce0 assign process. --
    node_coordinates_0_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            node_coordinates_0_ce0 <= ap_const_logic_1;
        else 
            node_coordinates_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_coordinates_0_d0 <= x_reg_1304;

    -- node_coordinates_0_we0 assign process. --
    node_coordinates_0_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_9_i_fu_896_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_i_fu_896_p2)))) then 
            node_coordinates_0_we0 <= ap_const_logic_1;
        else 
            node_coordinates_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_coordinates_1_address0 assign process. --
    node_coordinates_1_address0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, node_coordinates_1_addr_reg_1447, ap_sig_cseq_ST_st21_fsm_20, tmp_25_reg_1562, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st4_fsm_3, tmp_2_i_fu_887_p1, tmp_20_fu_1036_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            node_coordinates_1_address0 <= tmp_2_i_fu_887_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            node_coordinates_1_address0 <= tmp_25_reg_1562(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            node_coordinates_1_address0 <= node_coordinates_1_addr_reg_1447;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            node_coordinates_1_address0 <= tmp_20_fu_1036_p1(12 - 1 downto 0);
        else 
            node_coordinates_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_coordinates_1_ce0 assign process. --
    node_coordinates_1_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            node_coordinates_1_ce0 <= ap_const_logic_1;
        else 
            node_coordinates_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    node_coordinates_1_d0 <= y_1_reg_1330;

    -- node_coordinates_1_we0 assign process. --
    node_coordinates_1_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_9_i_fu_896_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_i_fu_896_p2)))) then 
            node_coordinates_1_we0 <= ap_const_logic_1;
        else 
            node_coordinates_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_costPlusHeuristic_address0 assign process. --
    node_costPlusHeuristic_address0_assign_proc : process(tmp_18_reg_1363, ap_sig_cseq_ST_st13_fsm_12, tmp_23_reg_1486, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25, tmp_s_fu_902_p1, tmp_i7_fu_977_p1, tmp_i8_fu_1126_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            node_costPlusHeuristic_address0 <= tmp_23_reg_1486(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            node_costPlusHeuristic_address0 <= tmp_18_reg_1363(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_costPlusHeuristic_address0 <= tmp_s_fu_902_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            node_costPlusHeuristic_address0 <= tmp_i8_fu_1126_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            node_costPlusHeuristic_address0 <= tmp_i7_fu_977_p1(12 - 1 downto 0);
        else 
            node_costPlusHeuristic_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_costPlusHeuristic_ce0 assign process. --
    node_costPlusHeuristic_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st27_fsm_26, grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            node_costPlusHeuristic_ce0 <= ap_const_logic_1;
        else 
            node_costPlusHeuristic_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_costPlusHeuristic_d0 assign process. --
    node_costPlusHeuristic_d0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25, tmp_1_i_fu_954_p2, tmp_1_i1_fu_1103_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            node_costPlusHeuristic_d0 <= tmp_1_i1_fu_1103_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            node_costPlusHeuristic_d0 <= tmp_1_i_fu_954_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_costPlusHeuristic_d0 <= ap_const_lv32_0;
        else 
            node_costPlusHeuristic_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- node_costPlusHeuristic_we0 assign process. --
    node_costPlusHeuristic_we0_assign_proc : process(or_cond_reg_1377, or_cond1_reg_1500, grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = or_cond_reg_1377)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = or_cond1_reg_1500)))) then 
            node_costPlusHeuristic_we0 <= ap_const_logic_1;
        else 
            node_costPlusHeuristic_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_cost_address0 assign process. --
    node_cost_address0_assign_proc : process(tmp_18_reg_1363, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, tmp_23_reg_1486, ap_sig_cseq_ST_st25_fsm_24, grp_aStar_calculateCost_fu_696_node_cost_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st24_fsm_23, tmp_s_fu_902_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_cost_address0 <= tmp_s_fu_902_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            node_cost_address0 <= tmp_23_reg_1486(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            node_cost_address0 <= tmp_18_reg_1363(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            node_cost_address0 <= grp_aStar_calculateCost_fu_696_node_cost_address0;
        else 
            node_cost_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_cost_ce0 assign process. --
    node_cost_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st25_fsm_24, grp_aStar_adjacentNodes_fu_684_ap_done, grp_aStar_calculateCost_fu_696_node_cost_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))))) then 
            node_cost_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            node_cost_ce0 <= grp_aStar_calculateCost_fu_696_node_cost_ce0;
        else 
            node_cost_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_cost_d0 assign process. --
    node_cost_d0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, grp_aStar_calculateCost_fu_696_node_cost_d0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_cost_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            node_cost_d0 <= grp_aStar_calculateCost_fu_696_node_cost_d0;
        else 
            node_cost_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- node_cost_we0 assign process. --
    node_cost_we0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, grp_aStar_adjacentNodes_fu_684_ap_done, grp_aStar_calculateCost_fu_696_node_cost_we0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))))) then 
            node_cost_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            node_cost_we0 <= grp_aStar_calculateCost_fu_696_node_cost_we0;
        else 
            node_cost_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_father_address0 assign process. --
    node_father_address0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, tmp_18_reg_1363, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, tmp_23_reg_1486, tmp_25_fu_1180_p1, ap_sig_cseq_ST_st29_fsm_28, grp_aStar_calculateCost_fu_696_node_father_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st24_fsm_23, tmp_s_fu_902_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            node_father_address0 <= tmp_23_reg_1486(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            node_father_address0 <= tmp_18_reg_1363(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_father_address0 <= tmp_s_fu_902_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            node_father_address0 <= tmp_25_fu_1180_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            node_father_address0 <= grp_aStar_calculateCost_fu_696_node_father_address0;
        else 
            node_father_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_father_ce0 assign process. --
    node_father_ce0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st29_fsm_28, grp_aStar_adjacentNodes_fu_684_ap_done, grp_aStar_calculateCost_fu_696_node_father_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))))) then 
            node_father_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            node_father_ce0 <= grp_aStar_calculateCost_fu_696_node_father_ce0;
        else 
            node_father_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_father_d0 assign process. --
    node_father_d0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, position_5_reg_1324, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st5_fsm_4, positionFather_1_fu_1072_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            node_father_d0 <= positionFather_1_fu_1072_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            node_father_d0 <= position_5_reg_1324;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_father_d0 <= ap_const_lv32_FFFFFFFF;
        else 
            node_father_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- node_father_we0 assign process. --
    node_father_we0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, grp_fu_737_p2, ap_sig_cseq_ST_st8_fsm_7, grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = grp_fu_737_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))))) then 
            node_father_we0 <= ap_const_logic_1;
        else 
            node_father_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_heuristic_address0 assign process. --
    node_heuristic_address0_assign_proc : process(tmp_18_reg_1363, tmp_23_reg_1486, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25, tmp_s_fu_902_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            node_heuristic_address0 <= tmp_23_reg_1486(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            node_heuristic_address0 <= tmp_18_reg_1363(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_heuristic_address0 <= tmp_s_fu_902_p1(12 - 1 downto 0);
        else 
            node_heuristic_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_heuristic_ce0 assign process. --
    node_heuristic_ce0_assign_proc : process(grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            node_heuristic_ce0 <= ap_const_logic_1;
        else 
            node_heuristic_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_heuristic_d0 assign process. --
    node_heuristic_d0_assign_proc : process(tmp_i1_reg_1391, tmp_i5_reg_1514, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            node_heuristic_d0 <= tmp_i5_reg_1514;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            node_heuristic_d0 <= tmp_i1_reg_1391;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_heuristic_d0 <= ap_const_lv32_0;
        else 
            node_heuristic_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- node_heuristic_we0 assign process. --
    node_heuristic_we0_assign_proc : process(or_cond_reg_1377, or_cond1_reg_1500, grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = or_cond_reg_1377)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = or_cond1_reg_1500)))) then 
            node_heuristic_we0 <= ap_const_logic_1;
        else 
            node_heuristic_we0 <= ap_const_logic_0;
        end if; 
    end process;

    node_visited_addr_1_gep_fu_198_p3 <= tmp_2_i_fu_887_p1(12 - 1 downto 0);

    -- node_visited_address0 assign process. --
    node_visited_address0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st20_fsm_19, tmp_18_fu_927_p1, ap_sig_cseq_ST_st13_fsm_12, tmp_23_fu_1063_p1, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, tmp_2_i_fu_887_p1, tmp_9_i_fu_896_p2, node_visited_addr_1_gep_fu_198_p3, tmp_s_fu_902_p1, tmp_i_fu_983_p1, tmp_i3_fu_1132_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            node_visited_address0 <= tmp_i3_fu_1132_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            node_visited_address0 <= tmp_i_fu_983_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_visited_address0 <= tmp_s_fu_902_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_i_fu_896_p2)))) then 
            node_visited_address0 <= node_visited_addr_1_gep_fu_198_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_i_fu_896_p2))) then 
            node_visited_address0 <= tmp_2_i_fu_887_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            node_visited_address0 <= tmp_23_fu_1063_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            node_visited_address0 <= tmp_18_fu_927_p1(12 - 1 downto 0);
        else 
            node_visited_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_visited_ce0 assign process. --
    node_visited_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st27_fsm_26, grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, tmp_9_i_fu_896_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_i_fu_896_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_i_fu_896_p2))))) then 
            node_visited_ce0 <= ap_const_logic_1;
        else 
            node_visited_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_visited_d0 assign process. --
    node_visited_d0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, tmp_9_i_fu_896_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_i_fu_896_p2))))) then 
            node_visited_d0 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_i_fu_896_p2))) then 
            node_visited_d0 <= ap_const_lv1_0;
        else 
            node_visited_d0 <= "X";
        end if; 
    end process;


    -- node_visited_we0 assign process. --
    node_visited_we0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, exitcond_i1_fu_965_p2, ap_sig_cseq_ST_st27_fsm_26, exitcond_i2_fu_1114_p2, grp_aStar_adjacentNodes_fu_684_ap_done, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, tmp_9_i_fu_896_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_aStar_adjacentNodes_fu_684_ap_done))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_i_fu_896_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_i_fu_896_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2))))) then 
            node_visited_we0 <= ap_const_logic_1;
        else 
            node_visited_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- openNodes_address0 assign process. --
    openNodes_address0_assign_proc : process(tmp_18_reg_1363, ap_sig_cseq_ST_st13_fsm_12, exitcond_i1_fu_965_p2, tmp_23_reg_1486, ap_sig_cseq_ST_st27_fsm_26, exitcond_i2_fu_1114_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25, tmp_2_i_fu_887_p1, tmp_i7_fu_977_p1, tmp_i_fu_983_p1, tmp_i8_fu_1126_p1, tmp_i3_fu_1132_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2)))) then 
            openNodes_address0 <= tmp_i3_fu_1132_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            openNodes_address0 <= tmp_23_reg_1486(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2)))) then 
            openNodes_address0 <= tmp_i_fu_983_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            openNodes_address0 <= tmp_18_reg_1363(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            openNodes_address0 <= tmp_2_i_fu_887_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and (ap_const_lv1_0 = exitcond_i2_fu_1114_p2))) then 
            openNodes_address0 <= tmp_i8_fu_1126_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond_i1_fu_965_p2))) then 
            openNodes_address0 <= tmp_i7_fu_977_p1(12 - 1 downto 0);
        else 
            openNodes_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- openNodes_ce0 assign process. --
    openNodes_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, exitcond_i1_fu_965_p2, ap_sig_cseq_ST_st27_fsm_26, exitcond_i2_fu_1114_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond_i1_fu_965_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and (ap_const_lv1_0 = exitcond_i2_fu_1114_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2))))) then 
            openNodes_ce0 <= ap_const_logic_1;
        else 
            openNodes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- openNodes_d0 assign process. --
    openNodes_d0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, exitcond_i1_fu_965_p2, ap_sig_cseq_ST_st27_fsm_26, exitcond_i2_fu_1114_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25))) then 
            openNodes_d0 <= ap_const_lv1_0;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2))))) then 
            openNodes_d0 <= ap_const_lv1_1;
        else 
            openNodes_d0 <= "X";
        end if; 
    end process;


    -- openNodes_we0 assign process. --
    openNodes_we0_assign_proc : process(or_cond_reg_1377, ap_sig_cseq_ST_st13_fsm_12, exitcond_i1_fu_965_p2, or_cond1_reg_1500, ap_sig_cseq_ST_st27_fsm_26, exitcond_i2_fu_1114_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond_i1_fu_965_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = or_cond_reg_1377)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = or_cond1_reg_1500)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and not((ap_const_lv1_0 = exitcond_i2_fu_1114_p2))))) then 
            openNodes_we0 <= ap_const_logic_1;
        else 
            openNodes_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_i_fu_811_p2 <= (tmp_4_i_fu_799_p2 or tmp_5_i_fu_805_p2);
    p_shl1_cast_fu_862_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_855_p3),12));
    p_shl2_cast_fu_1245_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_1237_p3),13));
    p_shl3_cast_fu_1257_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_1249_p3),13));
    p_shl4_cast_fu_1197_p3 <= (tmp_9_fu_1194_p1 & ap_const_lv5_0);
    p_shl5_cast_fu_1208_p3 <= (tmp_10_fu_1205_p1 & ap_const_lv2_0);
    p_shl_cast_fu_851_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_844_p3),12));
    positionBestOption_2_i1_fu_1164_p3 <= 
        position_4_reg_650 when (openNodes_q0(0) = '1') else 
        positionBestOption_positionBes_1_fu_1149_p3;
    positionBestOption_2_i_fu_1020_p3 <= 
        position_3_reg_593 when (openNodes_q0(0) = '1') else 
        positionBestOption_positionBes_fu_1005_p3;
    positionBestOption_i11_cast_fu_1110_p1 <= std_logic_vector(resize(unsigned(positionBestOption_1_reg_639),32));
    positionBestOption_i_cast_fu_961_p1 <= std_logic_vector(resize(unsigned(positionBestOption_reg_582),32));
    positionBestOption_positionBes_1_fu_1149_p3 <= 
        positionBestOption_i11_cast_reg_1526 when (tmp_8_i1_fu_1143_p2(0) = '1') else 
        position_4_reg_650;
    positionBestOption_positionBes_fu_1005_p3 <= 
        positionBestOption_i_cast_reg_1403 when (tmp_8_i9_fu_999_p2(0) = '1') else 
        position_3_reg_593;
    positionFather_1_fu_1072_p3 <= (tmp_5_fu_1068_p1 & node_coordinates_0_q0);
    position_5_fu_822_p2 <= std_logic_vector(unsigned(xStart) + unsigned(tmp_1_fu_817_p2));
    tmp1_fu_948_p2 <= std_logic_vector(unsigned(tmp_3_fu_938_p2) + unsigned(tmp_4_fu_943_p2));
    tmp2_fu_1097_p2 <= std_logic_vector(unsigned(tmp_7_fu_1092_p2) + unsigned(tmp_6_fu_1087_p2));
    tmp_10_fu_1205_p1 <= xFinish(11 - 1 downto 0);
    tmp_11_fu_1233_p1 <= node_coordinates_1_q0(13 - 1 downto 0);
    tmp_12_fu_1237_p3 <= (node_coordinates_0_q0 & ap_const_lv5_0);
    tmp_13_fu_1249_p3 <= (node_coordinates_0_q0 & ap_const_lv2_0);
    tmp_16_fu_844_p3 <= (x_reg_1304 & ap_const_lv5_0);
    tmp_17_fu_922_p1 <= std_logic_vector(resize(unsigned(i_reg_570),64));
        tmp_18_fu_927_p1 <= std_logic_vector(resize(signed(adjacentPosition_2_q0),64));

    tmp_1_fu_817_p2 <= std_logic_vector(shift_left(unsigned(yStart),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_1_i1_fu_1103_p2 <= std_logic_vector(unsigned(node_cost_q0) + unsigned(tmp2_fu_1097_p2));
    tmp_1_i_fu_954_p2 <= std_logic_vector(unsigned(tmp1_fu_948_p2) + unsigned(node_cost_q0));
        tmp_20_fu_1036_p1 <= std_logic_vector(resize(signed(position3_reg_617),64));

    tmp_21_fu_1058_p1 <= std_logic_vector(resize(unsigned(i1_reg_627),64));
    tmp_22_fu_1138_p2 <= "1" when (position_4_reg_650 = finalPosition_reg_1426) else "0";
        tmp_23_fu_1063_p1 <= std_logic_vector(resize(signed(adjacentPosition_2_q0),64));

        tmp_25_fu_1180_p1 <= std_logic_vector(resize(signed(position_1_reg_675),64));

    tmp_26_fu_1185_p2 <= "1" when (node_father_q0 = ap_const_lv32_FFFFFFFF) else "0";
    tmp_27_fu_855_p3 <= (x_reg_1304 & ap_const_lv2_0);
    tmp_28_fu_866_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_851_p1) + unsigned(p_shl1_cast_fu_862_p1));
    tmp_29_fu_876_p2 <= std_logic_vector(unsigned(tmp_fu_840_p1) + unsigned(tmp_34_cast_fu_872_p1));
    tmp_2_fu_989_p2 <= std_logic_vector(shift_left(unsigned(yFinish),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_2_i_fu_887_p1 <= std_logic_vector(resize(unsigned(i_i_reg_558),64));
    tmp_30_fu_1216_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1197_p3) + unsigned(p_shl5_cast_fu_1208_p3));
    tmp_31_fu_1222_p2 <= std_logic_vector(unsigned(tmp_8_fu_1191_p1) + unsigned(tmp_30_fu_1216_p2));
    tmp_32_fu_1261_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_1257_p1) + unsigned(p_shl2_cast_fu_1245_p1));
    tmp_33_fu_1267_p2 <= std_logic_vector(unsigned(tmp_32_fu_1261_p2) + unsigned(tmp_11_fu_1233_p1));
    tmp_34_cast_fu_872_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_866_p2),13));
        tmp_35_cast_fu_882_p1 <= std_logic_vector(resize(signed(tmp_29_fu_876_p2),64));

    tmp_3_fu_938_p2 <= std_logic_vector(shift_left(unsigned(tmp_i1_reg_1391),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
        tmp_45_cast_fu_1228_p1 <= std_logic_vector(resize(signed(tmp_31_fu_1222_p2),64));

        tmp_49_cast_fu_1273_p1 <= std_logic_vector(resize(signed(tmp_33_reg_1591),64));

    tmp_4_fu_943_p2 <= std_logic_vector(shift_left(unsigned(tmp_i1_reg_1391),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_4_i_fu_799_p2 <= "0" when (x_fu_783_p1 = ap_const_lv6_0) else "1";
    tmp_5_fu_1068_p1 <= node_coordinates_1_q0(26 - 1 downto 0);
    tmp_5_i_fu_805_p2 <= "1" when (i_i_reg_558 = ap_const_lv12_0) else "0";
    tmp_6_fu_1087_p2 <= std_logic_vector(shift_left(unsigned(tmp_i5_reg_1514),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_7_fu_1092_p2 <= std_logic_vector(shift_left(unsigned(tmp_i5_reg_1514),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_8_fu_1191_p1 <= yFinish(13 - 1 downto 0);
    tmp_8_i1_fu_1143_p2 <= "1" when (signed(node_costPlusHeuristic_q0) < signed(bestOption_i1_reg_663)) else "0";
    tmp_8_i9_fu_999_p2 <= "1" when (signed(node_costPlusHeuristic_q0) < signed(bestOption_i_reg_605)) else "0";
    tmp_9_fu_1194_p1 <= xFinish(8 - 1 downto 0);
    tmp_9_i_fu_896_p2 <= "1" when (map_r_q0 = ap_const_lv32_1) else "0";
    tmp_fu_840_p1 <= y_1_fu_833_p3(13 - 1 downto 0);
    tmp_i1_fu_932_p2 <= std_logic_vector(unsigned(grp_fu_775_p3) + unsigned(grp_fu_755_p3));
        tmp_i3_fu_1132_p1 <= std_logic_vector(resize(signed(position_4_reg_650),64));

    tmp_i5_fu_1081_p2 <= std_logic_vector(unsigned(grp_fu_755_p3) + unsigned(grp_fu_775_p3));
    tmp_i7_fu_977_p1 <= std_logic_vector(resize(unsigned(positionBestOption_reg_582),64));
    tmp_i8_fu_1126_p1 <= std_logic_vector(resize(unsigned(positionBestOption_1_reg_639),64));
        tmp_i_fu_983_p1 <= std_logic_vector(resize(signed(position_3_reg_593),64));

        tmp_s_fu_902_p1 <= std_logic_vector(resize(signed(position_5_reg_1324),64));

    x_fu_783_p1 <= i_i_reg_558(6 - 1 downto 0);
    y_1_fu_833_p3 <= 
        y_i_reg_546 when (or_cond_i_reg_1319(0) = '1') else 
        y_fu_827_p2;
    y_fu_827_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(y_i_reg_546));
end behav;
