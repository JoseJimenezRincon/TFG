-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aStar_calculateCost is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (3 downto 0);
    position : IN STD_LOGIC_VECTOR (31 downto 0);
    node_father_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    node_father_ce0 : OUT STD_LOGIC;
    node_father_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_cost_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    node_cost_ce0 : OUT STD_LOGIC;
    node_cost_we0 : OUT STD_LOGIC;
    node_cost_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_cost_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aStar_calculateCost is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal tmp_s_fu_78_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_122 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_58 : BOOLEAN;
    signal icmp_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal node_cost_load_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_cost_addr_2_reg_147 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal tmp_2_fu_83_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal node_cost_addr_1_gep_fu_62_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal tmp_fu_88_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                icmp_reg_138 <= icmp_fu_98_p2;
                node_cost_load_reg_142 <= node_cost_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((icmp_fu_98_p2 = ap_const_lv1_0)))) then
                node_cost_addr_2_reg_147 <= tmp_s_reg_122(12 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_7_reg_152 <= tmp_7_fu_117_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_s_reg_122 <= tmp_s_fu_78_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, icmp_fu_98_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if ((icmp_fu_98_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_58 assign process. --
    ap_sig_bdd_58_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_58 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_58)
    begin
        if (ap_sig_bdd_58) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_98_p2 <= "1" when (tmp_fu_88_p4 = ap_const_lv2_1) else "0";
    node_cost_addr_1_gep_fu_62_p3 <= tmp_s_reg_122(12 - 1 downto 0);

    -- node_cost_address0 assign process. --
    node_cost_address0_assign_proc : process(tmp_s_reg_122, ap_sig_cseq_ST_st2_fsm_1, icmp_fu_98_p2, ap_sig_cseq_ST_st3_fsm_2, node_cost_addr_2_reg_147, tmp_2_fu_83_p1, node_cost_addr_1_gep_fu_62_p3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_cost_address0 <= node_cost_addr_2_reg_147;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (icmp_fu_98_p2 = ap_const_lv1_0))) then 
            node_cost_address0 <= node_cost_addr_1_gep_fu_62_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((icmp_fu_98_p2 = ap_const_lv1_0)))) then 
            node_cost_address0 <= tmp_s_reg_122(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            node_cost_address0 <= tmp_2_fu_83_p1(12 - 1 downto 0);
        else 
            node_cost_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- node_cost_ce0 assign process. --
    node_cost_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, icmp_fu_98_p2, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((icmp_fu_98_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (icmp_fu_98_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            node_cost_ce0 <= ap_const_logic_1;
        else 
            node_cost_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- node_cost_d0 assign process. --
    node_cost_d0_assign_proc : process(icmp_fu_98_p2, ap_sig_cseq_ST_st3_fsm_2, tmp_7_reg_152, tmp_3_fu_104_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            node_cost_d0 <= tmp_7_reg_152;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (icmp_fu_98_p2 = ap_const_lv1_0))) then 
            node_cost_d0 <= tmp_3_fu_104_p2;
        else 
            node_cost_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- node_cost_we0 assign process. --
    node_cost_we0_assign_proc : process(icmp_fu_98_p2, icmp_reg_138, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (icmp_fu_98_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((icmp_reg_138 = ap_const_lv1_0))))) then 
            node_cost_we0 <= ap_const_logic_1;
        else 
            node_cost_we0 <= ap_const_logic_0;
        end if; 
    end process;

    node_father_address0 <= tmp_s_fu_78_p1(12 - 1 downto 0);

    -- node_father_ce0 assign process. --
    node_father_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            node_father_ce0 <= ap_const_logic_1;
        else 
            node_father_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_111_p2 <= std_logic_vector(unsigned(node_cost_q0) + unsigned(ap_const_lv32_E));
        tmp_2_fu_83_p1 <= std_logic_vector(resize(signed(node_father_q0),64));

    tmp_3_fu_104_p2 <= std_logic_vector(unsigned(node_cost_q0) + unsigned(ap_const_lv32_A));
    tmp_7_fu_117_p2 <= std_logic_vector(unsigned(tmp1_fu_111_p2) + unsigned(node_cost_load_reg_142));
    tmp_fu_88_p4 <= i(3 downto 2);
        tmp_s_fu_78_p1 <= std_logic_vector(resize(signed(position),64));

end behav;
