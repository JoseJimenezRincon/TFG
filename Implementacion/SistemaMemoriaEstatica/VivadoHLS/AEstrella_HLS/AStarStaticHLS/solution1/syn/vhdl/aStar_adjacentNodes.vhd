-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aStar_adjacentNodes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0);
    adjacentPosition_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    adjacentPosition_2_ce0 : OUT STD_LOGIC;
    adjacentPosition_2_we0 : OUT STD_LOGIC;
    adjacentPosition_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    adjacentPosition_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    adjacentPosition_2_ce1 : OUT STD_LOGIC;
    adjacentPosition_2_we1 : OUT STD_LOGIC;
    adjacentPosition_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    adjacentPosition_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    adjacentPosition_0_ce0 : OUT STD_LOGIC;
    adjacentPosition_0_we0 : OUT STD_LOGIC;
    adjacentPosition_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    adjacentPosition_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    adjacentPosition_0_ce1 : OUT STD_LOGIC;
    adjacentPosition_0_we1 : OUT STD_LOGIC;
    adjacentPosition_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    adjacentPosition_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    adjacentPosition_1_ce0 : OUT STD_LOGIC;
    adjacentPosition_1_we0 : OUT STD_LOGIC;
    adjacentPosition_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    adjacentPosition_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    adjacentPosition_1_ce1 : OUT STD_LOGIC;
    adjacentPosition_1_we1 : OUT STD_LOGIC;
    adjacentPosition_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aStar_adjacentNodes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_FFFFFFBF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110111111";
    constant ap_const_lv32_FFFFFFC1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_FFFFFFC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_36 : BOOLEAN;
    signal initPosition_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal initPosition_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal tmp_8_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal tmp_13_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal tmp_15_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_136 : BOOLEAN;
    signal tmp_5_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal tmp_s_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_201 : BOOLEAN;
    signal tmp_4_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_225 : BOOLEAN;
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_238 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_260 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_268 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_324 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_332 : BOOLEAN;
    signal tmp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                initPosition_reg_297 <= initPosition_fu_177_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0))) then
                tmp_10_reg_315 <= tmp_10_fu_243_p2;
                tmp_11_reg_320 <= tmp_11_fu_249_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_12_reg_325 <= tmp_12_fu_255_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2))) then
                tmp_13_reg_329 <= tmp_13_fu_260_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_14_reg_333 <= tmp_14_fu_265_p2;
                tmp_15_reg_339 <= tmp_15_fu_271_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_7_reg_307 <= tmp_7_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0))) then
                tmp_8_reg_311 <= tmp_8_fu_238_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_7_fu_233_p2, tmp_8_fu_238_p2, tmp_12_fu_255_p2, tmp_13_fu_260_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (((tmp_7_fu_233_p2 = ap_const_lv1_0) and not((tmp_8_fu_238_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                elsif (((tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (((ap_const_lv1_0 = tmp_12_fu_255_p2) and not((ap_const_lv1_0 = tmp_13_fu_260_p2)))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif (((ap_const_lv1_0 = tmp_12_fu_255_p2) and (ap_const_lv1_0 = tmp_13_fu_260_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- adjacentPosition_0_address0 assign process. --
    adjacentPosition_0_address0_assign_proc : process(tmp_7_fu_233_p2, ap_sig_cseq_ST_st4_fsm_3, tmp_8_fu_238_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            adjacentPosition_0_address0 <= ap_const_lv3_6;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            adjacentPosition_0_address0 <= ap_const_lv3_7;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            adjacentPosition_0_address0 <= ap_const_lv3_5;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            adjacentPosition_0_address0 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_7_fu_233_p2 = ap_const_lv1_0)))) then 
            adjacentPosition_0_address0 <= ap_const_lv3_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and not((tmp_8_fu_238_p2 = ap_const_lv1_0))))) then 
            adjacentPosition_0_address0 <= ap_const_lv3_0;
        else 
            adjacentPosition_0_address0 <= "XXX";
        end if; 
    end process;


    -- adjacentPosition_0_address1 assign process. --
    adjacentPosition_0_address1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            adjacentPosition_0_address1 <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            adjacentPosition_0_address1 <= ap_const_lv3_6;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            adjacentPosition_0_address1 <= ap_const_lv3_4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            adjacentPosition_0_address1 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            adjacentPosition_0_address1 <= ap_const_lv3_1;
        else 
            adjacentPosition_0_address1 <= "XXX";
        end if; 
    end process;


    -- adjacentPosition_0_ce0 assign process. --
    adjacentPosition_0_ce0_assign_proc : process(tmp_7_fu_233_p2, ap_sig_cseq_ST_st4_fsm_3, tmp_8_fu_238_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and not((tmp_8_fu_238_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_7_fu_233_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            adjacentPosition_0_ce0 <= ap_const_logic_1;
        else 
            adjacentPosition_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_0_ce1 assign process. --
    adjacentPosition_0_ce1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            adjacentPosition_0_ce1 <= ap_const_logic_1;
        else 
            adjacentPosition_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_0_d0 assign process. --
    adjacentPosition_0_d0_assign_proc : process(x, tmp_7_fu_233_p2, ap_sig_cseq_ST_st4_fsm_3, tmp_8_fu_238_p2, tmp_10_fu_243_p2, tmp_11_reg_320, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            adjacentPosition_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            adjacentPosition_0_d0 <= ap_const_lv32_3F;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            adjacentPosition_0_d0 <= tmp_11_reg_320;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            adjacentPosition_0_d0 <= x;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_7_fu_233_p2 = ap_const_lv1_0))))) then 
            adjacentPosition_0_d0 <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and not((tmp_8_fu_238_p2 = ap_const_lv1_0))))) then 
            adjacentPosition_0_d0 <= ap_const_lv32_3E;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0))) then 
            adjacentPosition_0_d0 <= tmp_10_fu_243_p2;
        else 
            adjacentPosition_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- adjacentPosition_0_d1 assign process. --
    adjacentPosition_0_d1_assign_proc : process(x, ap_sig_cseq_ST_st4_fsm_3, tmp_10_reg_315, tmp_11_fu_249_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            adjacentPosition_0_d1 <= ap_const_lv32_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            adjacentPosition_0_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            adjacentPosition_0_d1 <= ap_const_lv32_3E;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            adjacentPosition_0_d1 <= ap_const_lv32_3F;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            adjacentPosition_0_d1 <= tmp_10_reg_315;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            adjacentPosition_0_d1 <= x;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            adjacentPosition_0_d1 <= tmp_11_fu_249_p2;
        else 
            adjacentPosition_0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- adjacentPosition_0_we0 assign process. --
    adjacentPosition_0_we0_assign_proc : process(tmp_7_fu_233_p2, tmp_7_reg_307, ap_sig_cseq_ST_st4_fsm_3, tmp_8_fu_238_p2, tmp_8_reg_311, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and not((tmp_8_fu_238_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((tmp_7_fu_233_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (tmp_7_reg_307 = ap_const_lv1_0) and (tmp_8_reg_311 = ap_const_lv1_0)))) then 
            adjacentPosition_0_we0 <= ap_const_logic_1;
        else 
            adjacentPosition_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_0_we1 assign process. --
    adjacentPosition_0_we1_assign_proc : process(tmp_7_fu_233_p2, tmp_7_reg_307, ap_sig_cseq_ST_st4_fsm_3, tmp_8_fu_238_p2, tmp_8_reg_311, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (tmp_7_fu_233_p2 = ap_const_lv1_0) and (tmp_8_fu_238_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (tmp_7_reg_307 = ap_const_lv1_0) and (tmp_8_reg_311 = ap_const_lv1_0)))) then 
            adjacentPosition_0_we1 <= ap_const_logic_1;
        else 
            adjacentPosition_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_address0 assign process. --
    adjacentPosition_1_address0_assign_proc : process(tmp_12_fu_255_p2, ap_sig_cseq_ST_st7_fsm_6, tmp_13_fu_260_p2, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            adjacentPosition_1_address0 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            adjacentPosition_1_address0 <= ap_const_lv3_7;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            adjacentPosition_1_address0 <= ap_const_lv3_5;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            adjacentPosition_1_address0 <= ap_const_lv3_3;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and (ap_const_lv1_0 = tmp_13_fu_260_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and not((ap_const_lv1_0 = tmp_13_fu_260_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_12_fu_255_p2))))) then 
            adjacentPosition_1_address0 <= ap_const_lv3_0;
        else 
            adjacentPosition_1_address0 <= "XXX";
        end if; 
    end process;


    -- adjacentPosition_1_address1 assign process. --
    adjacentPosition_1_address1_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            adjacentPosition_1_address1 <= ap_const_lv3_6;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            adjacentPosition_1_address1 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            adjacentPosition_1_address1 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            adjacentPosition_1_address1 <= ap_const_lv3_1;
        else 
            adjacentPosition_1_address1 <= "XXX";
        end if; 
    end process;


    -- adjacentPosition_1_ce0 assign process. --
    adjacentPosition_1_ce0_assign_proc : process(tmp_12_fu_255_p2, ap_sig_cseq_ST_st7_fsm_6, tmp_13_fu_260_p2, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and (ap_const_lv1_0 = tmp_13_fu_260_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and not((ap_const_lv1_0 = tmp_13_fu_260_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_12_fu_255_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            adjacentPosition_1_ce0 <= ap_const_logic_1;
        else 
            adjacentPosition_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_ce1 assign process. --
    adjacentPosition_1_ce1_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            adjacentPosition_1_ce1 <= ap_const_logic_1;
        else 
            adjacentPosition_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_d0 assign process. --
    adjacentPosition_1_d0_assign_proc : process(y, tmp_12_fu_255_p2, ap_sig_cseq_ST_st7_fsm_6, tmp_13_fu_260_p2, tmp_14_reg_333, ap_sig_cseq_ST_st12_fsm_11, tmp_15_fu_271_p2, tmp_15_reg_339, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            adjacentPosition_1_d0 <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            adjacentPosition_1_d0 <= ap_const_lv32_22;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            adjacentPosition_1_d0 <= tmp_15_reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            adjacentPosition_1_d0 <= tmp_14_reg_333;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            adjacentPosition_1_d0 <= tmp_15_fu_271_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_12_fu_255_p2)))) then 
            adjacentPosition_1_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and not((ap_const_lv1_0 = tmp_13_fu_260_p2)))) then 
            adjacentPosition_1_d0 <= ap_const_lv32_23;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and (ap_const_lv1_0 = tmp_13_fu_260_p2))) then 
            adjacentPosition_1_d0 <= y;
        else 
            adjacentPosition_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- adjacentPosition_1_d1 assign process. --
    adjacentPosition_1_d1_assign_proc : process(y, ap_sig_cseq_ST_st7_fsm_6, tmp_14_fu_265_p2, tmp_14_reg_333, ap_sig_cseq_ST_st12_fsm_11, tmp_15_reg_339, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            adjacentPosition_1_d1 <= ap_const_lv32_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            adjacentPosition_1_d1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            adjacentPosition_1_d1 <= ap_const_lv32_22;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            adjacentPosition_1_d1 <= ap_const_lv32_23;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            adjacentPosition_1_d1 <= tmp_15_reg_339;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            adjacentPosition_1_d1 <= tmp_14_reg_333;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            adjacentPosition_1_d1 <= tmp_14_fu_265_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            adjacentPosition_1_d1 <= y;
        else 
            adjacentPosition_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- adjacentPosition_1_we0 assign process. --
    adjacentPosition_1_we0_assign_proc : process(tmp_12_fu_255_p2, tmp_12_reg_325, ap_sig_cseq_ST_st7_fsm_6, tmp_13_fu_260_p2, tmp_13_reg_329, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and (ap_const_lv1_0 = tmp_13_fu_260_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and not((ap_const_lv1_0 = tmp_13_fu_260_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_12_fu_255_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_12_reg_325) and (ap_const_lv1_0 = tmp_13_reg_329)))) then 
            adjacentPosition_1_we0 <= ap_const_logic_1;
        else 
            adjacentPosition_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_1_we1 assign process. --
    adjacentPosition_1_we1_assign_proc : process(tmp_12_fu_255_p2, tmp_12_reg_325, ap_sig_cseq_ST_st7_fsm_6, tmp_13_fu_260_p2, tmp_13_reg_329, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_12_fu_255_p2) and (ap_const_lv1_0 = tmp_13_fu_260_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_12_reg_325) and (ap_const_lv1_0 = tmp_13_reg_329)))) then 
            adjacentPosition_1_we1 <= ap_const_logic_1;
        else 
            adjacentPosition_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_address0 assign process. --
    adjacentPosition_2_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            adjacentPosition_2_address0 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            adjacentPosition_2_address0 <= ap_const_lv3_7;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            adjacentPosition_2_address0 <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            adjacentPosition_2_address0 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            adjacentPosition_2_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            adjacentPosition_2_address0 <= ap_const_lv3_6;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_address0 <= ap_const_lv3_4;
        else 
            adjacentPosition_2_address0 <= "XXX";
        end if; 
    end process;


    -- adjacentPosition_2_address1 assign process. --
    adjacentPosition_2_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            adjacentPosition_2_address1 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            adjacentPosition_2_address1 <= ap_const_lv3_6;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            adjacentPosition_2_address1 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            adjacentPosition_2_address1 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            adjacentPosition_2_address1 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            adjacentPosition_2_address1 <= ap_const_lv3_7;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_address1 <= ap_const_lv3_5;
        else 
            adjacentPosition_2_address1 <= "XXX";
        end if; 
    end process;


    -- adjacentPosition_2_ce0 assign process. --
    adjacentPosition_2_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_ce0 <= ap_const_logic_1;
        else 
            adjacentPosition_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_ce1 assign process. --
    adjacentPosition_2_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            adjacentPosition_2_ce1 <= ap_const_logic_1;
        else 
            adjacentPosition_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_d0 assign process. --
    adjacentPosition_2_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, tmp_3_fu_183_p2, ap_sig_cseq_ST_st2_fsm_1, tmp_5_fu_197_p2, ap_sig_cseq_ST_st3_fsm_2, tmp_s_fu_209_p2, tmp_1_fu_221_p2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_d0 <= ap_const_lv32_FFFFFFFF;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            adjacentPosition_2_d0 <= tmp_1_fu_221_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            adjacentPosition_2_d0 <= tmp_s_fu_209_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            adjacentPosition_2_d0 <= tmp_5_fu_197_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            adjacentPosition_2_d0 <= tmp_3_fu_183_p2;
        else 
            adjacentPosition_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- adjacentPosition_2_d1 assign process. --
    adjacentPosition_2_d1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, tmp_4_fu_190_p2, tmp_6_fu_203_p2, tmp_9_fu_215_p2, tmp_2_fu_227_p2, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            adjacentPosition_2_d1 <= ap_const_lv32_FFFFFFFF;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            adjacentPosition_2_d1 <= tmp_2_fu_227_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            adjacentPosition_2_d1 <= tmp_9_fu_215_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            adjacentPosition_2_d1 <= tmp_6_fu_203_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            adjacentPosition_2_d1 <= tmp_4_fu_190_p2;
        else 
            adjacentPosition_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- adjacentPosition_2_we0 assign process. --
    adjacentPosition_2_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            adjacentPosition_2_we0 <= ap_const_logic_1;
        else 
            adjacentPosition_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- adjacentPosition_2_we1 assign process. --
    adjacentPosition_2_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            adjacentPosition_2_we1 <= ap_const_logic_1;
        else 
            adjacentPosition_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_136 assign process. --
    ap_sig_bdd_136_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_136 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_201 assign process. --
    ap_sig_bdd_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_201 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_225 assign process. --
    ap_sig_bdd_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_225 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_238 assign process. --
    ap_sig_bdd_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_238 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_260 assign process. --
    ap_sig_bdd_260_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_260 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_268 assign process. --
    ap_sig_bdd_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_268 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_324 assign process. --
    ap_sig_bdd_324_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_324 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_332 assign process. --
    ap_sig_bdd_332_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_332 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_36 assign process. --
    ap_sig_bdd_36_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_36 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_225)
    begin
        if (ap_sig_bdd_225) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_324)
    begin
        if (ap_sig_bdd_324) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_332)
    begin
        if (ap_sig_bdd_332) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_238)
    begin
        if (ap_sig_bdd_238) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_201)
    begin
        if (ap_sig_bdd_201) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_36)
    begin
        if (ap_sig_bdd_36) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_136)
    begin
        if (ap_sig_bdd_136) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_260)
    begin
        if (ap_sig_bdd_260) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_268)
    begin
        if (ap_sig_bdd_268) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    initPosition_fu_177_p2 <= std_logic_vector(unsigned(x) + unsigned(tmp_fu_171_p2));
    tmp_10_fu_243_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_11_fu_249_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv32_1));
    tmp_12_fu_255_p2 <= "1" when (y = ap_const_lv32_0) else "0";
    tmp_13_fu_260_p2 <= "1" when (y = ap_const_lv32_23) else "0";
    tmp_14_fu_265_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_15_fu_271_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv32_1));
    tmp_1_fu_221_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFC0) + signed(initPosition_reg_297));
    tmp_2_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) + unsigned(initPosition_reg_297));
    tmp_3_fu_183_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFBF) + signed(initPosition_fu_177_p2));
    tmp_4_fu_190_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFC1) + signed(initPosition_fu_177_p2));
    tmp_5_fu_197_p2 <= std_logic_vector(unsigned(ap_const_lv32_3F) + unsigned(initPosition_reg_297));
    tmp_6_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv32_41) + unsigned(initPosition_reg_297));
    tmp_7_fu_233_p2 <= "1" when (x = ap_const_lv32_0) else "0";
    tmp_8_fu_238_p2 <= "1" when (x = ap_const_lv32_3F) else "0";
    tmp_9_fu_215_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(initPosition_reg_297));
    tmp_fu_171_p2 <= std_logic_vector(shift_left(unsigned(y),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_s_fu_209_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(initPosition_reg_297));
end behav;
