// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _aStar_calculateCost_HH_
#define _aStar_calculateCost_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aStar_calculateCost : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > i;
    sc_in< sc_lv<32> > position;
    sc_out< sc_lv<12> > node_father_address0;
    sc_out< sc_logic > node_father_ce0;
    sc_in< sc_lv<32> > node_father_q0;
    sc_out< sc_lv<12> > node_cost_address0;
    sc_out< sc_logic > node_cost_ce0;
    sc_out< sc_logic > node_cost_we0;
    sc_out< sc_lv<32> > node_cost_d0;
    sc_in< sc_lv<32> > node_cost_q0;


    // Module declarations
    aStar_calculateCost(sc_module_name name);
    SC_HAS_PROCESS(aStar_calculateCost);

    ~aStar_calculateCost();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<64> > tmp_s_fu_78_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_122;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_58;
    sc_signal< sc_lv<1> > icmp_fu_98_p2;
    sc_signal< sc_lv<1> > icmp_reg_138;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_67;
    sc_signal< sc_lv<32> > node_cost_load_reg_142;
    sc_signal< sc_lv<12> > node_cost_addr_2_reg_147;
    sc_signal< sc_lv<32> > tmp_7_fu_117_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_152;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_83;
    sc_signal< sc_lv<64> > tmp_2_fu_83_p1;
    sc_signal< sc_lv<12> > node_cost_addr_1_gep_fu_62_p3;
    sc_signal< sc_lv<32> > tmp_3_fu_104_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_97;
    sc_signal< sc_lv<2> > tmp_fu_88_p4;
    sc_signal< sc_lv<32> > tmp1_fu_111_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_58();
    void thread_ap_sig_bdd_67();
    void thread_ap_sig_bdd_83();
    void thread_ap_sig_bdd_97();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_icmp_fu_98_p2();
    void thread_node_cost_addr_1_gep_fu_62_p3();
    void thread_node_cost_address0();
    void thread_node_cost_ce0();
    void thread_node_cost_d0();
    void thread_node_cost_we0();
    void thread_node_father_address0();
    void thread_node_father_ce0();
    void thread_tmp1_fu_111_p2();
    void thread_tmp_2_fu_83_p1();
    void thread_tmp_3_fu_104_p2();
    void thread_tmp_7_fu_117_p2();
    void thread_tmp_fu_88_p4();
    void thread_tmp_s_fu_78_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
