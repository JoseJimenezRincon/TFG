

================================================================
== Vivado HLS Report for 'aStar_adjacentNodes'
================================================================
* Date:           Fri Jun 30 11:23:19 2017

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        AStarStaticHLS
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.31|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    9|    9|    9|    9|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 18
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	10  / (tmp_7)
	5  / (!tmp_7 & !tmp_8)
	8  / (!tmp_7 & tmp_8)
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	17  / (tmp_12)
	12  / (!tmp_12 & !tmp_13)
	15  / (!tmp_12 & tmp_13)
8 --> 
	9  / true
9 --> 
	7  / true
10 --> 
	11  / true
11 --> 
	7  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
15 --> 
	16  / true
16 --> 
	14  / true
17 --> 
	18  / true
18 --> 
	14  / true
* FSM state operations: 

 <State 1>: 8.31ns
ST_1: y_read [1/1] 1.04ns
:0  %y_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %y) nounwind

ST_1: x_read [1/1] 1.04ns
:1  %x_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %x) nounwind

ST_1: tmp [1/1] 0.00ns
:2  %tmp = shl i32 %y_read, 6

ST_1: initPosition [1/1] 2.44ns
:3  %initPosition = add nsw i32 %x_read, %tmp

ST_1: tmp_3 [1/1] 2.44ns
:12  %tmp_3 = add nsw i32 -65, %initPosition

ST_1: stg_24 [1/1] 2.39ns
:13  store i32 %tmp_3, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 4), align 16

ST_1: tmp_4 [1/1] 2.44ns
:14  %tmp_4 = add nsw i32 -63, %initPosition

ST_1: stg_26 [1/1] 2.39ns
:15  store i32 %tmp_4, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 5), align 4


 <State 2>: 4.83ns
ST_2: tmp_5 [1/1] 2.44ns
:16  %tmp_5 = add nsw i32 63, %initPosition

ST_2: stg_28 [1/1] 2.39ns
:17  store i32 %tmp_5, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 6), align 8

ST_2: tmp_6 [1/1] 2.44ns
:18  %tmp_6 = add nsw i32 65, %initPosition

ST_2: stg_30 [1/1] 2.39ns
:19  store i32 %tmp_6, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 7), align 4


 <State 3>: 4.83ns
ST_3: tmp_s [1/1] 2.44ns
:4  %tmp_s = add nsw i32 -1, %initPosition

ST_3: stg_32 [1/1] 2.39ns
:5  store i32 %tmp_s, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 0), align 16

ST_3: tmp_9 [1/1] 2.44ns
:6  %tmp_9 = add nsw i32 1, %initPosition

ST_3: stg_34 [1/1] 2.39ns
:7  store i32 %tmp_9, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 1), align 4


 <State 4>: 4.83ns
ST_4: tmp_1 [1/1] 2.44ns
:8  %tmp_1 = add nsw i32 -64, %initPosition

ST_4: stg_36 [1/1] 2.39ns
:9  store i32 %tmp_1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 2), align 8

ST_4: tmp_2 [1/1] 2.44ns
:10  %tmp_2 = add nsw i32 64, %initPosition

ST_4: stg_38 [1/1] 2.39ns
:11  store i32 %tmp_2, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 3), align 4

ST_4: tmp_7 [1/1] 2.52ns
:20  %tmp_7 = icmp eq i32 %x_read, 0

ST_4: stg_40 [1/1] 0.00ns
:21  br i1 %tmp_7, label %1, label %2

ST_4: tmp_8 [1/1] 2.52ns
:0  %tmp_8 = icmp eq i32 %x_read, 63

ST_4: stg_42 [1/1] 0.00ns
:1  br i1 %tmp_8, label %3, label %4

ST_4: tmp_10 [1/1] 2.44ns
:0  %tmp_10 = add nsw i32 %x_read, -1

ST_4: stg_44 [1/1] 2.39ns
:1  store i32 %tmp_10, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 0), align 16

ST_4: tmp_11 [1/1] 2.44ns
:2  %tmp_11 = add nsw i32 %x_read, 1

ST_4: stg_46 [1/1] 2.39ns
:3  store i32 %tmp_11, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 1), align 4

ST_4: stg_47 [1/1] 2.39ns
:0  store i32 62, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 0), align 16

ST_4: stg_48 [1/1] 2.39ns
:1  store i32 1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 1), align 4


 <State 5>: 2.39ns
ST_5: stg_49 [1/1] 2.39ns
:4  store i32 %x_read, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 2), align 8

ST_5: stg_50 [1/1] 2.39ns
:5  store i32 %x_read, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 3), align 4


 <State 6>: 2.39ns
ST_6: stg_51 [1/1] 2.39ns
:6  store i32 %tmp_10, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 4), align 16

ST_6: stg_52 [1/1] 2.39ns
:7  store i32 %tmp_11, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 5), align 4


 <State 7>: 2.52ns
ST_7: stg_53 [1/1] 2.39ns
:8  store i32 %tmp_10, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 6), align 8

ST_7: stg_54 [1/1] 2.39ns
:9  store i32 %tmp_11, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 7), align 4

ST_7: stg_55 [1/1] 0.00ns
:10  br label %5

ST_7: stg_56 [1/1] 0.00ns
:0  br label %6

ST_7: tmp_12 [1/1] 2.52ns
:0  %tmp_12 = icmp eq i32 %y_read, 0

ST_7: stg_58 [1/1] 0.00ns
:1  br i1 %tmp_12, label %7, label %8

ST_7: tmp_13 [1/1] 2.52ns
:0  %tmp_13 = icmp eq i32 %y_read, 35

ST_7: stg_60 [1/1] 0.00ns
:1  br i1 %tmp_13, label %9, label %10

ST_7: stg_61 [1/1] 2.39ns
:0  store i32 %y_read, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 0), align 16

ST_7: stg_62 [1/1] 2.39ns
:1  store i32 %y_read, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 1), align 4

ST_7: stg_63 [1/1] 2.39ns
:0  store i32 35, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 0), align 16

ST_7: stg_64 [1/1] 2.39ns
:0  store i32 0, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 0), align 16


 <State 8>: 2.39ns
ST_8: stg_65 [1/1] 2.39ns
:2  store i32 63, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 2), align 8

ST_8: stg_66 [1/1] 2.39ns
:3  store i32 63, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 3), align 4

ST_8: stg_67 [1/1] 2.39ns
:5  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 5), align 4


 <State 9>: 2.39ns
ST_9: stg_68 [1/1] 2.39ns
:1  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 1), align 4

ST_9: stg_69 [1/1] 2.39ns
:4  store i32 62, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 4), align 16

ST_9: stg_70 [1/1] 2.39ns
:6  store i32 62, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 6), align 8

ST_9: stg_71 [1/1] 2.39ns
:7  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 7), align 4

ST_9: stg_72 [1/1] 0.00ns
:8  br label %5


 <State 10>: 2.39ns
ST_10: stg_73 [1/1] 2.39ns
:2  store i32 0, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 2), align 8

ST_10: stg_74 [1/1] 2.39ns
:3  store i32 0, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 3), align 4

ST_10: stg_75 [1/1] 2.39ns
:4  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 4), align 16


 <State 11>: 2.39ns
ST_11: stg_76 [1/1] 2.39ns
:0  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 0), align 16

ST_11: stg_77 [1/1] 2.39ns
:5  store i32 1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 5), align 4

ST_11: stg_78 [1/1] 2.39ns
:6  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 6), align 8

ST_11: stg_79 [1/1] 2.39ns
:7  store i32 1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_0, i64 0, i64 7), align 4

ST_11: stg_80 [1/1] 0.00ns
:8  br label %6


 <State 12>: 4.83ns
ST_12: tmp_14 [1/1] 2.44ns
:2  %tmp_14 = add nsw i32 %y_read, -1

ST_12: stg_82 [1/1] 2.39ns
:3  store i32 %tmp_14, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 2), align 8

ST_12: tmp_15 [1/1] 2.44ns
:4  %tmp_15 = add nsw i32 %y_read, 1

ST_12: stg_84 [1/1] 2.39ns
:5  store i32 %tmp_15, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 3), align 4


 <State 13>: 2.39ns
ST_13: stg_85 [1/1] 2.39ns
:6  store i32 %tmp_14, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 4), align 16

ST_13: stg_86 [1/1] 2.39ns
:7  store i32 %tmp_14, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 5), align 4


 <State 14>: 2.39ns
ST_14: stg_87 [1/1] 2.39ns
:8  store i32 %tmp_15, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 6), align 8

ST_14: stg_88 [1/1] 2.39ns
:9  store i32 %tmp_15, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 7), align 4

ST_14: stg_89 [1/1] 0.00ns
:10  br label %11

ST_14: stg_90 [1/1] 0.00ns
:0  br label %12

ST_14: stg_91 [1/1] 0.00ns
:0  ret void


 <State 15>: 2.39ns
ST_15: stg_92 [1/1] 2.39ns
:1  store i32 35, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 1), align 4

ST_15: stg_93 [1/1] 2.39ns
:2  store i32 34, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 2), align 8

ST_15: stg_94 [1/1] 2.39ns
:3  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 3), align 4


 <State 16>: 2.39ns
ST_16: stg_95 [1/1] 2.39ns
:4  store i32 34, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 4), align 16

ST_16: stg_96 [1/1] 2.39ns
:5  store i32 34, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 5), align 4

ST_16: stg_97 [1/1] 2.39ns
:6  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 6), align 8

ST_16: stg_98 [1/1] 2.39ns
:7  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 7), align 4

ST_16: stg_99 [1/1] 0.00ns
:8  br label %11


 <State 17>: 2.39ns
ST_17: stg_100 [1/1] 2.39ns
:1  store i32 0, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 1), align 4

ST_17: stg_101 [1/1] 2.39ns
:2  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 2), align 8

ST_17: stg_102 [1/1] 2.39ns
:3  store i32 1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 3), align 4


 <State 18>: 2.39ns
ST_18: stg_103 [1/1] 2.39ns
:4  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 4), align 16

ST_18: stg_104 [1/1] 2.39ns
:5  store i32 -1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_2, i64 0, i64 5), align 4

ST_18: stg_105 [1/1] 2.39ns
:6  store i32 1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 6), align 8

ST_18: stg_106 [1/1] 2.39ns
:7  store i32 1, i32* getelementptr inbounds ([8 x i32]* @adjacentPosition_1, i64 0, i64 7), align 4

ST_18: stg_107 [1/1] 0.00ns
:8  br label %12



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
