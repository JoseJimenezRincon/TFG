

================================================================
== Vivado HLS Report for 'aStar'
================================================================
* Date:           Fri Jun 30 11:23:20 2017

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        AStarStaticHLS
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.48|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------------+------+------+-------------+-----------+-----------+------+----------+
        |                           |   Latency   |  Iteration  |  Initiation Interval  | Trip |          |
        |         Loop Name         |  min |  max |   Latency   |  achieved |   target  | Count| Pipelined|
        +---------------------------+------+------+-------------+-----------+-----------+------+----------+
        |- ForinitNodes             |  6912|  6912|            3|          -|          -|  2304|    no    |
        |- FOR1                     |    32|    88|    4 ~ 11   |          -|          -|     8|    no    |
        |- FORcalculateBestOption   |  4608|  4608|            2|          -|          -|  2304|    no    |
        |- Loop 4                   |     ?|     ?| 4655 ~ 4719 |          -|          -|     ?|    no    |
        | + FOR2                    |    32|    96|    4 ~ 12   |          -|          -|     8|    no    |
        | + FORcalculateBestOption  |  4608|  4608|            2|          -|          -|  2304|    no    |
        |- Loop 5                   |     ?|     ?|            4|          -|          -|     ?|    no    |
        +---------------------------+------+------+-------------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 32
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond_i)
	5  / (exitcond_i)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 
	6  / true
6 --> 
	7  / (!exitcond1)
	13  / (exitcond1)
7 --> 
	8  / true
8 --> 
	9  / (!or_cond)
	12  / (or_cond)
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	6  / true
13 --> 
	14  / (!exitcond_i1)
	15  / (exitcond_i1)
14 --> 
	13  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / (!exitcond)
	27  / (exitcond)
20 --> 
	21  / true
21 --> 
	22  / (!or_cond1)
	26  / (or_cond1)
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	19  / true
27 --> 
	28  / (!exitcond_i2)
	15  / (exitcond_i2 & !tmp_22)
	29  / (exitcond_i2 & tmp_22)
28 --> 
	27  / true
29 --> 
	30  / true
30 --> 
	31  / (!tmp_26)
31 --> 
	32  / true
32 --> 
	29  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_33 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i32 %xStart) nounwind, !map !7

ST_1: stg_34 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i32 %yStart) nounwind, !map !13

ST_1: stg_35 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i32 %xFinish) nounwind, !map !17

ST_1: stg_36 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i32 %yFinish) nounwind, !map !21

ST_1: stg_37 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap([2304 x i32]* %map_r) nounwind, !map !25

ST_1: stg_38 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !32

ST_1: stg_39 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecTopModule([6 x i8]* @aStar_str) nounwind

ST_1: yFinish_read [1/1] 0.00ns
:7  %yFinish_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %yFinish) nounwind

ST_1: xFinish_read [1/1] 0.00ns
:8  %xFinish_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %xFinish) nounwind

ST_1: yStart_read [1/1] 0.00ns
:9  %yStart_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %yStart) nounwind

ST_1: xStart_read [1/1] 0.00ns
:10  %xStart_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %xStart) nounwind

ST_1: stg_44 [1/1] 1.57ns
:11  br label %1


 <State 2>: 8.31ns
ST_2: y_i [1/1] 0.00ns
:0  %y_i = phi i32 [ 0, %0 ], [ %y_1, %5 ]

ST_2: i_i [1/1] 0.00ns
:1  %i_i = phi i12 [ 0, %0 ], [ %i_1, %5 ]

ST_2: x [1/1] 0.00ns
:2  %x = trunc i12 %i_i to i6

ST_2: exitcond_i [1/1] 2.14ns
:3  %exitcond_i = icmp eq i12 %i_i, -1792

ST_2: empty [1/1] 0.00ns
:4  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2304, i64 2304, i64 2304) nounwind

ST_2: i_1 [1/1] 1.84ns
:5  %i_1 = add i12 1, %i_i

ST_2: stg_51 [1/1] 0.00ns
:6  br i1 %exitcond_i, label %initNodes.exit, label %2

ST_2: tmp_4_i [1/1] 1.94ns
:4  %tmp_4_i = icmp ne i6 %x, 0

ST_2: tmp_5_i [1/1] 2.14ns
:5  %tmp_5_i = icmp eq i12 %i_i, 0

ST_2: or_cond_i [1/1] 1.37ns
:6  %or_cond_i = or i1 %tmp_4_i, %tmp_5_i

ST_2: tmp_1 [1/1] 0.00ns
initNodes.exit:0  %tmp_1 = shl i32 %yStart_read, 6

ST_2: position_5 [1/1] 2.44ns
initNodes.exit:1  %position_5 = add nsw i32 %xStart_read, %tmp_1

ST_2: stg_57 [2/2] 8.31ns
initNodes.exit:13  call fastcc void @aStar_adjacentNodes(i32 %xStart_read, i32 %yStart_read)


 <State 3>: 8.48ns
ST_3: y [1/1] 2.44ns
:7  %y = add nsw i32 1, %y_i

ST_3: y_1 [1/1] 1.37ns
:8  %y_1 = select i1 %or_cond_i, i32 %y_i, i32 %y

ST_3: tmp [1/1] 0.00ns
:9  %tmp = trunc i32 %y_1 to i13

ST_3: tmp_16 [1/1] 0.00ns
:10  %tmp_16 = call i11 @_ssdm_op_BitConcatenate.i11.i6.i5(i6 %x, i5 0)

ST_3: p_shl_cast [1/1] 0.00ns
:11  %p_shl_cast = zext i11 %tmp_16 to i12

ST_3: tmp_27 [1/1] 0.00ns
:12  %tmp_27 = call i8 @_ssdm_op_BitConcatenate.i8.i6.i2(i6 %x, i2 0)

ST_3: p_shl1_cast [1/1] 0.00ns
:13  %p_shl1_cast = zext i8 %tmp_27 to i12

ST_3: tmp_28 [1/1] 1.84ns
:14  %tmp_28 = add i12 %p_shl_cast, %p_shl1_cast

ST_3: tmp_34_cast [1/1] 0.00ns
:15  %tmp_34_cast = zext i12 %tmp_28 to i13

ST_3: tmp_29 [1/1] 1.96ns
:16  %tmp_29 = add i13 %tmp, %tmp_34_cast

ST_3: tmp_35_cast [1/1] 0.00ns
:17  %tmp_35_cast = sext i13 %tmp_29 to i64

ST_3: map_addr_2 [1/1] 0.00ns
:18  %map_addr_2 = getelementptr [2304 x i32]* %map_r, i64 0, i64 %tmp_35_cast

ST_3: map_load [2/2] 2.71ns
:19  %map_load = load i32* %map_addr_2, align 4


 <State 4>: 5.23ns
ST_4: stg_71 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str) nounwind

ST_4: tmp_2_i [1/1] 0.00ns
:1  %tmp_2_i = zext i12 %i_i to i64

ST_4: openNodes_addr [1/1] 0.00ns
:2  %openNodes_addr = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_2_i

ST_4: stg_74 [1/1] 2.71ns
:3  store i1 true, i1* %openNodes_addr, align 1

ST_4: map_load [1/2] 2.71ns
:19  %map_load = load i32* %map_addr_2, align 4

ST_4: tmp_9_i [1/1] 2.52ns
:20  %tmp_9_i = icmp eq i32 %map_load, 1

ST_4: stg_77 [1/1] 0.00ns
:21  br i1 %tmp_9_i, label %4, label %3

ST_4: node_coordinates_0_addr [1/1] 0.00ns
:0  %node_coordinates_0_addr = getelementptr [2304 x i6]* @node_coordinates_0, i64 0, i64 %tmp_2_i

ST_4: stg_79 [1/1] 2.71ns
:1  store i6 %x, i6* %node_coordinates_0_addr, align 1

ST_4: node_coordinates_1_addr_2 [1/1] 0.00ns
:2  %node_coordinates_1_addr_2 = getelementptr [2304 x i32]* @node_coordinates_1, i64 0, i64 %tmp_2_i

ST_4: stg_81 [1/1] 2.71ns
:3  store i32 %y_1, i32* %node_coordinates_1_addr_2, align 4

ST_4: node_visited_addr_2 [1/1] 0.00ns
:4  %node_visited_addr_2 = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_2_i

ST_4: stg_83 [1/1] 2.71ns
:5  store i1 false, i1* %node_visited_addr_2, align 1

ST_4: stg_84 [1/1] 0.00ns
:6  br label %5

ST_4: node_visited_addr_1 [1/1] 0.00ns
:0  %node_visited_addr_1 = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_2_i

ST_4: stg_86 [1/1] 2.71ns
:1  store i1 true, i1* %node_visited_addr_1, align 1

ST_4: stg_87 [1/1] 0.00ns
:2  br label %5

ST_4: stg_88 [1/1] 0.00ns
:0  br label %1


 <State 5>: 2.71ns
ST_5: tmp_s [1/1] 0.00ns
initNodes.exit:2  %tmp_s = sext i32 %position_5 to i64

ST_5: node_father_addr [1/1] 0.00ns
initNodes.exit:3  %node_father_addr = getelementptr [2304 x i32]* @node_father, i64 0, i64 %tmp_s

ST_5: stg_91 [1/1] 2.71ns
initNodes.exit:4  store i32 -1, i32* %node_father_addr, align 4

ST_5: node_cost_addr [1/1] 0.00ns
initNodes.exit:5  %node_cost_addr = getelementptr [2304 x i32]* @node_cost, i64 0, i64 %tmp_s

ST_5: stg_93 [1/1] 2.71ns
initNodes.exit:6  store i32 0, i32* %node_cost_addr, align 4

ST_5: node_heuristic_addr [1/1] 0.00ns
initNodes.exit:7  %node_heuristic_addr = getelementptr [2304 x i32]* @node_heuristic, i64 0, i64 %tmp_s

ST_5: stg_95 [1/1] 2.71ns
initNodes.exit:8  store i32 0, i32* %node_heuristic_addr, align 4

ST_5: node_costPlusHeuristic_addr [1/1] 0.00ns
initNodes.exit:9  %node_costPlusHeuristic_addr = getelementptr [2304 x i32]* @node_costPlusHeuristic, i64 0, i64 %tmp_s

ST_5: stg_97 [1/1] 2.71ns
initNodes.exit:10  store i32 0, i32* %node_costPlusHeuristic_addr, align 4

ST_5: node_visited_addr [1/1] 0.00ns
initNodes.exit:11  %node_visited_addr = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_s

ST_5: stg_99 [1/1] 2.71ns
initNodes.exit:12  store i1 true, i1* %node_visited_addr, align 1

ST_5: stg_100 [1/2] 0.00ns
initNodes.exit:13  call fastcc void @aStar_adjacentNodes(i32 %xStart_read, i32 %yStart_read)

ST_5: stg_101 [1/1] 1.57ns
initNodes.exit:14  br label %6


 <State 6>: 3.45ns
ST_6: i [1/1] 0.00ns
:0  %i = phi i4 [ 0, %initNodes.exit ], [ %i_2, %._crit_edge ]

ST_6: exitcond1 [1/1] 1.88ns
:1  %exitcond1 = icmp eq i4 %i, -8

ST_6: empty_4 [1/1] 0.00ns
:2  %empty_4 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8) nounwind

ST_6: i_2 [1/1] 0.80ns
:3  %i_2 = add i4 %i, 1

ST_6: stg_106 [1/1] 1.57ns
:4  br i1 %exitcond1, label %.preheader2, label %7

ST_6: tmp_17 [1/1] 0.00ns
:1  %tmp_17 = zext i4 %i to i64

ST_6: adjacentPosition_2_addr [1/1] 0.00ns
:2  %adjacentPosition_2_addr = getelementptr [8 x i32]* @adjacentPosition_2, i64 0, i64 %tmp_17

ST_6: adjacentPosition_2_load [2/2] 2.39ns
:3  %adjacentPosition_2_load = load i32* %adjacentPosition_2_addr, align 4


 <State 7>: 5.10ns
ST_7: adjacentPosition_2_load [1/2] 2.39ns
:3  %adjacentPosition_2_load = load i32* %adjacentPosition_2_addr, align 4

ST_7: tmp_18 [1/1] 0.00ns
:4  %tmp_18 = sext i32 %adjacentPosition_2_load to i64

ST_7: node_visited_addr_3 [1/1] 0.00ns
:5  %node_visited_addr_3 = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_18

ST_7: node_visited_load [2/2] 2.71ns
:6  %node_visited_load = load i1* %node_visited_addr_3, align 1


 <State 8>: 4.08ns
ST_8: stg_114 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([5 x i8]* @p_str2) nounwind

ST_8: node_visited_load [1/2] 2.71ns
:6  %node_visited_load = load i1* %node_visited_addr_3, align 1

ST_8: tmp_19 [1/1] 2.52ns
:7  %tmp_19 = icmp eq i32 %adjacentPosition_2_load, -1

ST_8: or_cond [1/1] 1.37ns
:8  %or_cond = or i1 %node_visited_load, %tmp_19

ST_8: stg_118 [1/1] 0.00ns
:9  br i1 %or_cond, label %._crit_edge, label %8

ST_8: node_father_addr_1 [1/1] 0.00ns
:2  %node_father_addr_1 = getelementptr [2304 x i32]* @node_father, i64 0, i64 %tmp_18

ST_8: stg_120 [1/1] 2.71ns
:3  store i32 %position_5, i32* %node_father_addr_1, align 4

ST_8: adjacentPosition_0_addr [1/1] 0.00ns
:4  %adjacentPosition_0_addr = getelementptr [8 x i32]* @adjacentPosition_0, i64 0, i64 %tmp_17

ST_8: adjacentPosition_0_load [2/2] 2.39ns
:5  %adjacentPosition_0_load = load i32* %adjacentPosition_0_addr, align 4

ST_8: adjacentPosition_1_addr [1/1] 0.00ns
:6  %adjacentPosition_1_addr = getelementptr [8 x i32]* @adjacentPosition_1, i64 0, i64 %tmp_17

ST_8: adjacentPosition_1_load [2/2] 2.39ns
:7  %adjacentPosition_1_load = load i32* %adjacentPosition_1_addr, align 4


 <State 9>: 4.83ns
ST_9: adjacentPosition_0_load [1/2] 2.39ns
:5  %adjacentPosition_0_load = load i32* %adjacentPosition_0_addr, align 4

ST_9: adjacentPosition_1_load [1/2] 2.39ns
:7  %adjacentPosition_1_load = load i32* %adjacentPosition_1_addr, align 4

ST_9: xDistance [1/1] 2.44ns
:8  %xDistance = sub nsw i32 %xFinish_read, %adjacentPosition_0_load

ST_9: yDistance [1/1] 2.44ns
:9  %yDistance = sub nsw i32 %yFinish_read, %adjacentPosition_1_load

ST_9: stg_129 [2/2] 2.40ns
:19  call fastcc void @aStar_calculateCost(i4 %i, i32 %adjacentPosition_2_load) nounwind


 <State 10>: 6.33ns
ST_10: neg_i [1/1] 2.44ns
:10  %neg_i = sub i32 0, %xDistance

ST_10: abscond_i [1/1] 2.52ns
:11  %abscond_i = icmp sgt i32 %xDistance, 0

ST_10: abs_i [1/1] 1.37ns
:12  %abs_i = select i1 %abscond_i, i32 %xDistance, i32 %neg_i

ST_10: neg1_i [1/1] 2.44ns
:13  %neg1_i = sub i32 0, %yDistance

ST_10: abscond2_i [1/1] 2.52ns
:14  %abscond2_i = icmp sgt i32 %yDistance, 0

ST_10: abs3_i [1/1] 1.37ns
:15  %abs3_i = select i1 %abscond2_i, i32 %yDistance, i32 %neg1_i

ST_10: tmp_i1 [1/1] 2.44ns
:16  %tmp_i1 = add nsw i32 %abs3_i, %abs_i

ST_10: stg_137 [1/2] 0.00ns
:19  call fastcc void @aStar_calculateCost(i4 %i, i32 %adjacentPosition_2_load) nounwind


 <State 11>: 2.71ns
ST_11: node_cost_addr_3 [1/1] 0.00ns
:20  %node_cost_addr_3 = getelementptr [2304 x i32]* @node_cost, i64 0, i64 %tmp_18

ST_11: node_cost_load [2/2] 2.71ns
:21  %node_cost_load = load i32* %node_cost_addr_3, align 4


 <State 12>: 7.39ns
ST_12: openNodes_addr_3 [1/1] 0.00ns
:0  %openNodes_addr_3 = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_18

ST_12: stg_141 [1/1] 2.71ns
:1  store i1 false, i1* %openNodes_addr_3, align 1

ST_12: node_heuristic_addr_1 [1/1] 0.00ns
:17  %node_heuristic_addr_1 = getelementptr [2304 x i32]* @node_heuristic, i64 0, i64 %tmp_18

ST_12: stg_143 [1/1] 2.71ns
:18  store i32 %tmp_i1, i32* %node_heuristic_addr_1, align 4

ST_12: node_cost_load [1/2] 2.71ns
:21  %node_cost_load = load i32* %node_cost_addr_3, align 4

ST_12: tmp_3 [1/1] 0.00ns
:22  %tmp_3 = shl i32 %tmp_i1, 3

ST_12: tmp_4 [1/1] 0.00ns
:23  %tmp_4 = shl i32 %tmp_i1, 1

ST_12: tmp1 [1/1] 1.97ns
:24  %tmp1 = add i32 %tmp_3, %tmp_4

ST_12: tmp_1_i [1/1] 1.97ns
:25  %tmp_1_i = add nsw i32 %tmp1, %node_cost_load

ST_12: node_costPlusHeuristic_addr_1 [1/1] 0.00ns
:26  %node_costPlusHeuristic_addr_1 = getelementptr [2304 x i32]* @node_costPlusHeuristic, i64 0, i64 %tmp_18

ST_12: stg_150 [1/1] 2.71ns
:27  store i32 %tmp_1_i, i32* %node_costPlusHeuristic_addr_1, align 4

ST_12: stg_151 [1/1] 0.00ns
:28  br label %._crit_edge

ST_12: stg_152 [1/1] 0.00ns
._crit_edge:0  br label %6


 <State 13>: 2.71ns
ST_13: positionBestOption [1/1] 0.00ns
.preheader2:0  %positionBestOption = phi i12 [ %i_4, %_ifconv.i ], [ 0, %6 ]

ST_13: position_3 [1/1] 0.00ns
.preheader2:1  %position_3 = phi i32 [ %positionBestOption_2_i, %_ifconv.i ], [ undef, %6 ]

ST_13: bestOption_i [1/1] 0.00ns
.preheader2:2  %bestOption_i = phi i32 [ %bestOption_2_i, %_ifconv.i ], [ 2147483647, %6 ]

ST_13: positionBestOption_i_cast [1/1] 0.00ns
.preheader2:3  %positionBestOption_i_cast = zext i12 %positionBestOption to i32

ST_13: exitcond_i1 [1/1] 2.14ns
.preheader2:4  %exitcond_i1 = icmp eq i12 %positionBestOption, -1792

ST_13: empty_5 [1/1] 0.00ns
.preheader2:5  %empty_5 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2304, i64 2304, i64 2304) nounwind

ST_13: i_4 [1/1] 1.84ns
.preheader2:6  %i_4 = add i12 %positionBestOption, 1

ST_13: stg_160 [1/1] 0.00ns
.preheader2:7  br i1 %exitcond_i1, label %calculateBestOption.exit, label %_ifconv.i

ST_13: tmp_i7 [1/1] 0.00ns
_ifconv.i:1  %tmp_i7 = zext i12 %positionBestOption to i64

ST_13: openNodes_addr_2 [1/1] 0.00ns
_ifconv.i:2  %openNodes_addr_2 = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_i7

ST_13: openNodes_load [2/2] 2.71ns
_ifconv.i:3  %openNodes_load = load i1* %openNodes_addr_2, align 1

ST_13: node_costPlusHeuristic_addr_3 [1/1] 0.00ns
_ifconv.i:4  %node_costPlusHeuristic_addr_3 = getelementptr [2304 x i32]* @node_costPlusHeuristic, i64 0, i64 %tmp_i7

ST_13: bestOption [2/2] 2.71ns
_ifconv.i:5  %bestOption = load i32* %node_costPlusHeuristic_addr_3, align 4

ST_13: tmp_i [1/1] 0.00ns
calculateBestOption.exit:0  %tmp_i = sext i32 %position_3 to i64

ST_13: openNodes_addr_1 [1/1] 0.00ns
calculateBestOption.exit:1  %openNodes_addr_1 = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_i

ST_13: stg_168 [1/1] 2.71ns
calculateBestOption.exit:2  store i1 true, i1* %openNodes_addr_1, align 1

ST_13: node_visited_addr_4 [1/1] 0.00ns
calculateBestOption.exit:3  %node_visited_addr_4 = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_i

ST_13: stg_170 [1/1] 2.71ns
calculateBestOption.exit:4  store i1 true, i1* %node_visited_addr_4, align 1

ST_13: tmp_2 [1/1] 0.00ns
calculateBestOption.exit:5  %tmp_2 = shl i32 %yFinish_read, 6

ST_13: finalPosition [1/1] 2.44ns
calculateBestOption.exit:6  %finalPosition = add nsw i32 %xFinish_read, %tmp_2

ST_13: stg_173 [1/1] 1.57ns
calculateBestOption.exit:7  br label %._crit_edge5


 <State 14>: 7.97ns
ST_14: stg_174 [1/1] 0.00ns
_ifconv.i:0  call void (...)* @_ssdm_op_SpecLoopName([23 x i8]* @p_str1) nounwind

ST_14: openNodes_load [1/2] 2.71ns
_ifconv.i:3  %openNodes_load = load i1* %openNodes_addr_2, align 1

ST_14: bestOption [1/2] 2.71ns
_ifconv.i:5  %bestOption = load i32* %node_costPlusHeuristic_addr_3, align 4

ST_14: tmp_8_i9 [1/1] 2.52ns
_ifconv.i:6  %tmp_8_i9 = icmp slt i32 %bestOption, %bestOption_i

ST_14: positionBestOption_positionBes [1/1] 1.37ns
_ifconv.i:7  %positionBestOption_positionBes = select i1 %tmp_8_i9, i32 %positionBestOption_i_cast, i32 %position_3

ST_14: bestOption_1_bestOption_i [1/1] 1.37ns
_ifconv.i:8  %bestOption_1_bestOption_i = select i1 %tmp_8_i9, i32 %bestOption, i32 %bestOption_i

ST_14: positionBestOption_2_i [1/1] 1.37ns
_ifconv.i:9  %positionBestOption_2_i = select i1 %openNodes_load, i32 %position_3, i32 %positionBestOption_positionBes

ST_14: bestOption_2_i [1/1] 1.37ns
_ifconv.i:10  %bestOption_2_i = select i1 %openNodes_load, i32 %bestOption_i, i32 %bestOption_1_bestOption_i

ST_14: stg_182 [1/1] 0.00ns
_ifconv.i:11  br label %.preheader2


 <State 15>: 2.71ns
ST_15: position3 [1/1] 0.00ns
._crit_edge5:0  %position3 = phi i32 [ %position_3, %calculateBestOption.exit ], [ %position_4, %calculateBestOption.exit28 ]

ST_15: tmp_20 [1/1] 0.00ns
._crit_edge5:1  %tmp_20 = sext i32 %position3 to i64

ST_15: node_coordinates_0_addr_1 [1/1] 0.00ns
._crit_edge5:2  %node_coordinates_0_addr_1 = getelementptr [2304 x i6]* @node_coordinates_0, i64 0, i64 %tmp_20

ST_15: node_coordinates_0_load [2/2] 2.71ns
._crit_edge5:3  %node_coordinates_0_load = load i6* %node_coordinates_0_addr_1, align 1

ST_15: node_coordinates_1_addr [1/1] 0.00ns
._crit_edge5:5  %node_coordinates_1_addr = getelementptr [2304 x i32]* @node_coordinates_1, i64 0, i64 %tmp_20

ST_15: node_coordinates_1_load [2/2] 2.71ns
._crit_edge5:6  %node_coordinates_1_load = load i32* %node_coordinates_1_addr, align 4


 <State 16>: 2.71ns
ST_16: node_coordinates_0_load [1/2] 2.71ns
._crit_edge5:3  %node_coordinates_0_load = load i6* %node_coordinates_0_addr_1, align 1

ST_16: node_coordinates_1_load [1/2] 2.71ns
._crit_edge5:6  %node_coordinates_1_load = load i32* %node_coordinates_1_addr, align 4


 <State 17>: 8.31ns
ST_17: extLd [1/1] 0.00ns
._crit_edge5:4  %extLd = zext i6 %node_coordinates_0_load to i32

ST_17: stg_192 [2/2] 8.31ns
._crit_edge5:7  call fastcc void @aStar_adjacentNodes(i32 %extLd, i32 %node_coordinates_1_load)


 <State 18>: 1.57ns
ST_18: stg_193 [1/2] 0.00ns
._crit_edge5:7  call fastcc void @aStar_adjacentNodes(i32 %extLd, i32 %node_coordinates_1_load)

ST_18: stg_194 [1/1] 1.57ns
._crit_edge5:8  br label %9


 <State 19>: 3.45ns
ST_19: i1 [1/1] 0.00ns
:0  %i1 = phi i4 [ 0, %._crit_edge5 ], [ %i_3, %._crit_edge3 ]

ST_19: exitcond [1/1] 1.88ns
:1  %exitcond = icmp eq i4 %i1, -8

ST_19: empty_6 [1/1] 0.00ns
:2  %empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8) nounwind

ST_19: i_3 [1/1] 0.80ns
:3  %i_3 = add i4 %i1, 1

ST_19: stg_199 [1/1] 1.57ns
:4  br i1 %exitcond, label %.preheader1, label %10

ST_19: tmp_21 [1/1] 0.00ns
:1  %tmp_21 = zext i4 %i1 to i64

ST_19: adjacentPosition_2_addr_1 [1/1] 0.00ns
:2  %adjacentPosition_2_addr_1 = getelementptr [8 x i32]* @adjacentPosition_2, i64 0, i64 %tmp_21

ST_19: adjacentPosition_2_load_1 [2/2] 2.39ns
:3  %adjacentPosition_2_load_1 = load i32* %adjacentPosition_2_addr_1, align 4


 <State 20>: 5.10ns
ST_20: adjacentPosition_2_load_1 [1/2] 2.39ns
:3  %adjacentPosition_2_load_1 = load i32* %adjacentPosition_2_addr_1, align 4

ST_20: tmp_23 [1/1] 0.00ns
:4  %tmp_23 = sext i32 %adjacentPosition_2_load_1 to i64

ST_20: node_visited_addr_5 [1/1] 0.00ns
:5  %node_visited_addr_5 = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_23

ST_20: node_visited_load_1 [2/2] 2.71ns
:6  %node_visited_load_1 = load i1* %node_visited_addr_5, align 1


 <State 21>: 4.08ns
ST_21: stg_207 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([5 x i8]* @p_str3) nounwind

ST_21: node_visited_load_1 [1/2] 2.71ns
:6  %node_visited_load_1 = load i1* %node_visited_addr_5, align 1

ST_21: tmp_24 [1/1] 2.52ns
:7  %tmp_24 = icmp eq i32 %adjacentPosition_2_load_1, -1

ST_21: or_cond1 [1/1] 1.37ns
:8  %or_cond1 = or i1 %node_visited_load_1, %tmp_24

ST_21: stg_211 [1/1] 0.00ns
:9  br i1 %or_cond1, label %._crit_edge3, label %11

ST_21: node_coordinates_0_load_1 [2/2] 2.71ns
:2  %node_coordinates_0_load_1 = load i6* %node_coordinates_0_addr_1, align 1

ST_21: node_coordinates_1_load_2 [2/2] 2.71ns
:3  %node_coordinates_1_load_2 = load i32* %node_coordinates_1_addr, align 4

ST_21: adjacentPosition_0_addr_1 [1/1] 0.00ns
:8  %adjacentPosition_0_addr_1 = getelementptr [8 x i32]* @adjacentPosition_0, i64 0, i64 %tmp_21

ST_21: adjacentPosition_0_load_1 [2/2] 2.39ns
:9  %adjacentPosition_0_load_1 = load i32* %adjacentPosition_0_addr_1, align 4

ST_21: adjacentPosition_1_addr_1 [1/1] 0.00ns
:10  %adjacentPosition_1_addr_1 = getelementptr [8 x i32]* @adjacentPosition_1, i64 0, i64 %tmp_21

ST_21: adjacentPosition_1_load_1 [2/2] 2.39ns
:11  %adjacentPosition_1_load_1 = load i32* %adjacentPosition_1_addr_1, align 4


 <State 22>: 5.42ns
ST_22: node_coordinates_0_load_1 [1/2] 2.71ns
:2  %node_coordinates_0_load_1 = load i6* %node_coordinates_0_addr_1, align 1

ST_22: node_coordinates_1_load_2 [1/2] 2.71ns
:3  %node_coordinates_1_load_2 = load i32* %node_coordinates_1_addr, align 4

ST_22: tmp_5 [1/1] 0.00ns
:4  %tmp_5 = trunc i32 %node_coordinates_1_load_2 to i26

ST_22: positionFather_1 [1/1] 0.00ns
:5  %positionFather_1 = call i32 @_ssdm_op_BitConcatenate.i32.i26.i6(i26 %tmp_5, i6 %node_coordinates_0_load_1)

ST_22: node_father_addr_3 [1/1] 0.00ns
:6  %node_father_addr_3 = getelementptr [2304 x i32]* @node_father, i64 0, i64 %tmp_23

ST_22: stg_223 [1/1] 2.71ns
:7  store i32 %positionFather_1, i32* %node_father_addr_3, align 4

ST_22: adjacentPosition_0_load_1 [1/2] 2.39ns
:9  %adjacentPosition_0_load_1 = load i32* %adjacentPosition_0_addr_1, align 4

ST_22: adjacentPosition_1_load_1 [1/2] 2.39ns
:11  %adjacentPosition_1_load_1 = load i32* %adjacentPosition_1_addr_1, align 4

ST_22: xDistance_1 [1/1] 2.44ns
:12  %xDistance_1 = sub nsw i32 %xFinish_read, %adjacentPosition_0_load_1

ST_22: yDistance_1 [1/1] 2.44ns
:13  %yDistance_1 = sub nsw i32 %yFinish_read, %adjacentPosition_1_load_1


 <State 23>: 6.33ns
ST_23: neg_i1 [1/1] 2.44ns
:14  %neg_i1 = sub i32 0, %xDistance_1

ST_23: abscond_i1 [1/1] 2.52ns
:15  %abscond_i1 = icmp sgt i32 %xDistance_1, 0

ST_23: abs_i1 [1/1] 1.37ns
:16  %abs_i1 = select i1 %abscond_i1, i32 %xDistance_1, i32 %neg_i1

ST_23: neg1_i1 [1/1] 2.44ns
:17  %neg1_i1 = sub i32 0, %yDistance_1

ST_23: abscond2_i1 [1/1] 2.52ns
:18  %abscond2_i1 = icmp sgt i32 %yDistance_1, 0

ST_23: abs3_i1 [1/1] 1.37ns
:19  %abs3_i1 = select i1 %abscond2_i1, i32 %yDistance_1, i32 %neg1_i1

ST_23: tmp_i5 [1/1] 2.44ns
:20  %tmp_i5 = add nsw i32 %abs_i1, %abs3_i1

ST_23: stg_235 [2/2] 2.40ns
:23  call fastcc void @aStar_calculateCost(i4 %i1, i32 %adjacentPosition_2_load_1) nounwind


 <State 24>: 0.00ns
ST_24: stg_236 [1/2] 0.00ns
:23  call fastcc void @aStar_calculateCost(i4 %i1, i32 %adjacentPosition_2_load_1) nounwind


 <State 25>: 2.71ns
ST_25: node_cost_addr_4 [1/1] 0.00ns
:24  %node_cost_addr_4 = getelementptr [2304 x i32]* @node_cost, i64 0, i64 %tmp_23

ST_25: node_cost_load_2 [2/2] 2.71ns
:25  %node_cost_load_2 = load i32* %node_cost_addr_4, align 4


 <State 26>: 7.39ns
ST_26: openNodes_addr_6 [1/1] 0.00ns
:0  %openNodes_addr_6 = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_23

ST_26: stg_240 [1/1] 2.71ns
:1  store i1 false, i1* %openNodes_addr_6, align 1

ST_26: node_heuristic_addr_2 [1/1] 0.00ns
:21  %node_heuristic_addr_2 = getelementptr [2304 x i32]* @node_heuristic, i64 0, i64 %tmp_23

ST_26: stg_242 [1/1] 2.71ns
:22  store i32 %tmp_i5, i32* %node_heuristic_addr_2, align 4

ST_26: node_cost_load_2 [1/2] 2.71ns
:25  %node_cost_load_2 = load i32* %node_cost_addr_4, align 4

ST_26: tmp_6 [1/1] 0.00ns
:26  %tmp_6 = shl i32 %tmp_i5, 3

ST_26: tmp_7 [1/1] 0.00ns
:27  %tmp_7 = shl i32 %tmp_i5, 1

ST_26: tmp2 [1/1] 1.97ns
:28  %tmp2 = add i32 %tmp_7, %tmp_6

ST_26: tmp_1_i1 [1/1] 1.97ns
:29  %tmp_1_i1 = add nsw i32 %node_cost_load_2, %tmp2

ST_26: node_costPlusHeuristic_addr_2 [1/1] 0.00ns
:30  %node_costPlusHeuristic_addr_2 = getelementptr [2304 x i32]* @node_costPlusHeuristic, i64 0, i64 %tmp_23

ST_26: stg_249 [1/1] 2.71ns
:31  store i32 %tmp_1_i1, i32* %node_costPlusHeuristic_addr_2, align 4

ST_26: stg_250 [1/1] 0.00ns
:32  br label %._crit_edge3

ST_26: stg_251 [1/1] 0.00ns
._crit_edge3:0  br label %9


 <State 27>: 4.09ns
ST_27: positionBestOption_1 [1/1] 0.00ns
.preheader1:0  %positionBestOption_1 = phi i12 [ %i_5, %_ifconv.i27 ], [ 0, %9 ]

ST_27: position_4 [1/1] 0.00ns
.preheader1:1  %position_4 = phi i32 [ %positionBestOption_2_i1, %_ifconv.i27 ], [ undef, %9 ]

ST_27: bestOption_i1 [1/1] 0.00ns
.preheader1:2  %bestOption_i1 = phi i32 [ %bestOption_2_i1, %_ifconv.i27 ], [ 2147483647, %9 ]

ST_27: positionBestOption_i11_cast [1/1] 0.00ns
.preheader1:3  %positionBestOption_i11_cast = zext i12 %positionBestOption_1 to i32

ST_27: exitcond_i2 [1/1] 2.14ns
.preheader1:4  %exitcond_i2 = icmp eq i12 %positionBestOption_1, -1792

ST_27: empty_7 [1/1] 0.00ns
.preheader1:5  %empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2304, i64 2304, i64 2304) nounwind

ST_27: i_5 [1/1] 1.84ns
.preheader1:6  %i_5 = add i12 %positionBestOption_1, 1

ST_27: stg_259 [1/1] 0.00ns
.preheader1:7  br i1 %exitcond_i2, label %calculateBestOption.exit28, label %_ifconv.i27

ST_27: tmp_i8 [1/1] 0.00ns
_ifconv.i27:1  %tmp_i8 = zext i12 %positionBestOption_1 to i64

ST_27: openNodes_addr_5 [1/1] 0.00ns
_ifconv.i27:2  %openNodes_addr_5 = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_i8

ST_27: openNodes_load_1 [2/2] 2.71ns
_ifconv.i27:3  %openNodes_load_1 = load i1* %openNodes_addr_5, align 1

ST_27: node_costPlusHeuristic_addr_4 [1/1] 0.00ns
_ifconv.i27:4  %node_costPlusHeuristic_addr_4 = getelementptr [2304 x i32]* @node_costPlusHeuristic, i64 0, i64 %tmp_i8

ST_27: bestOption_1 [2/2] 2.71ns
_ifconv.i27:5  %bestOption_1 = load i32* %node_costPlusHeuristic_addr_4, align 4

ST_27: tmp_i3 [1/1] 0.00ns
calculateBestOption.exit28:0  %tmp_i3 = sext i32 %position_4 to i64

ST_27: openNodes_addr_4 [1/1] 0.00ns
calculateBestOption.exit28:1  %openNodes_addr_4 = getelementptr [2304 x i1]* @openNodes, i64 0, i64 %tmp_i3

ST_27: stg_267 [1/1] 2.71ns
calculateBestOption.exit28:2  store i1 true, i1* %openNodes_addr_4, align 1

ST_27: node_visited_addr_6 [1/1] 0.00ns
calculateBestOption.exit28:3  %node_visited_addr_6 = getelementptr [2304 x i1]* @node_visited, i64 0, i64 %tmp_i3

ST_27: stg_269 [1/1] 2.71ns
calculateBestOption.exit28:4  store i1 true, i1* %node_visited_addr_6, align 1

ST_27: tmp_22 [1/1] 2.52ns
calculateBestOption.exit28:5  %tmp_22 = icmp eq i32 %position_4, %finalPosition

ST_27: stg_271 [1/1] 1.57ns
calculateBestOption.exit28:6  br i1 %tmp_22, label %.preheader, label %._crit_edge5


 <State 28>: 7.97ns
ST_28: stg_272 [1/1] 0.00ns
_ifconv.i27:0  call void (...)* @_ssdm_op_SpecLoopName([23 x i8]* @p_str1) nounwind

ST_28: openNodes_load_1 [1/2] 2.71ns
_ifconv.i27:3  %openNodes_load_1 = load i1* %openNodes_addr_5, align 1

ST_28: bestOption_1 [1/2] 2.71ns
_ifconv.i27:5  %bestOption_1 = load i32* %node_costPlusHeuristic_addr_4, align 4

ST_28: tmp_8_i1 [1/1] 2.52ns
_ifconv.i27:6  %tmp_8_i1 = icmp slt i32 %bestOption_1, %bestOption_i1

ST_28: positionBestOption_positionBes_1 [1/1] 1.37ns
_ifconv.i27:7  %positionBestOption_positionBes_1 = select i1 %tmp_8_i1, i32 %positionBestOption_i11_cast, i32 %position_4

ST_28: bestOption_1_bestOption_i1 [1/1] 1.37ns
_ifconv.i27:8  %bestOption_1_bestOption_i1 = select i1 %tmp_8_i1, i32 %bestOption_1, i32 %bestOption_i1

ST_28: positionBestOption_2_i1 [1/1] 1.37ns
_ifconv.i27:9  %positionBestOption_2_i1 = select i1 %openNodes_load_1, i32 %position_4, i32 %positionBestOption_positionBes_1

ST_28: bestOption_2_i1 [1/1] 1.37ns
_ifconv.i27:10  %bestOption_2_i1 = select i1 %openNodes_load_1, i32 %bestOption_i1, i32 %bestOption_1_bestOption_i1

ST_28: stg_280 [1/1] 0.00ns
_ifconv.i27:11  br label %.preheader1


 <State 29>: 2.71ns
ST_29: position_1 [1/1] 0.00ns
.preheader:0  %position_1 = phi i32 [ %position, %12 ], [ %finalPosition, %calculateBestOption.exit28 ]

ST_29: tmp_25 [1/1] 0.00ns
.preheader:1  %tmp_25 = sext i32 %position_1 to i64

ST_29: node_father_addr_2 [1/1] 0.00ns
.preheader:2  %node_father_addr_2 = getelementptr [2304 x i32]* @node_father, i64 0, i64 %tmp_25

ST_29: position [2/2] 2.71ns
.preheader:3  %position = load i32* %node_father_addr_2, align 4


 <State 30>: 6.17ns
ST_30: position [1/2] 2.71ns
.preheader:3  %position = load i32* %node_father_addr_2, align 4

ST_30: tmp_26 [1/1] 2.52ns
.preheader:4  %tmp_26 = icmp eq i32 %position, -1

ST_30: stg_287 [1/1] 0.00ns
.preheader:5  br i1 %tmp_26, label %13, label %12

ST_30: node_coordinates_1_addr_1 [1/1] 0.00ns
:0  %node_coordinates_1_addr_1 = getelementptr [2304 x i32]* @node_coordinates_1, i64 0, i64 %tmp_25

ST_30: node_coordinates_1_load_1 [2/2] 2.71ns
:1  %node_coordinates_1_load_1 = load i32* %node_coordinates_1_addr_1, align 4

ST_30: node_coordinates_0_addr_2 [1/1] 0.00ns
:3  %node_coordinates_0_addr_2 = getelementptr [2304 x i6]* @node_coordinates_0, i64 0, i64 %tmp_25

ST_30: node_coordinates_0_load_2 [2/2] 2.71ns
:4  %node_coordinates_0_load_2 = load i6* %node_coordinates_0_addr_2, align 1

ST_30: tmp_8 [1/1] 0.00ns
:0  %tmp_8 = trunc i32 %yFinish_read to i13

ST_30: tmp_9 [1/1] 0.00ns
:1  %tmp_9 = trunc i32 %xFinish_read to i8

ST_30: p_shl4_cast [1/1] 0.00ns
:2  %p_shl4_cast = call i13 @_ssdm_op_BitConcatenate.i13.i8.i5(i8 %tmp_9, i5 0)

ST_30: tmp_10 [1/1] 0.00ns
:3  %tmp_10 = trunc i32 %xFinish_read to i11

ST_30: p_shl5_cast [1/1] 0.00ns
:4  %p_shl5_cast = call i13 @_ssdm_op_BitConcatenate.i13.i11.i2(i11 %tmp_10, i2 0)

ST_30: tmp_30 [1/1] 1.73ns
:5  %tmp_30 = add i13 %p_shl4_cast, %p_shl5_cast

ST_30: tmp_31 [1/1] 1.73ns
:6  %tmp_31 = add i13 %tmp_8, %tmp_30

ST_30: tmp_45_cast [1/1] 0.00ns
:7  %tmp_45_cast = sext i13 %tmp_31 to i64

ST_30: map_addr [1/1] 0.00ns
:8  %map_addr = getelementptr [2304 x i32]* %map_r, i64 0, i64 %tmp_45_cast

ST_30: stg_301 [1/1] 2.71ns
:9  store i32 4, i32* %map_addr, align 4

ST_30: stg_302 [1/1] 0.00ns
:10  ret i32 0


 <State 31>: 6.17ns
ST_31: node_coordinates_1_load_1 [1/2] 2.71ns
:1  %node_coordinates_1_load_1 = load i32* %node_coordinates_1_addr_1, align 4

ST_31: tmp_11 [1/1] 0.00ns
:2  %tmp_11 = trunc i32 %node_coordinates_1_load_1 to i13

ST_31: node_coordinates_0_load_2 [1/2] 2.71ns
:4  %node_coordinates_0_load_2 = load i6* %node_coordinates_0_addr_2, align 1

ST_31: tmp_12 [1/1] 0.00ns
:5  %tmp_12 = call i11 @_ssdm_op_BitConcatenate.i11.i6.i5(i6 %node_coordinates_0_load_2, i5 0)

ST_31: p_shl2_cast [1/1] 0.00ns
:6  %p_shl2_cast = zext i11 %tmp_12 to i13

ST_31: tmp_13 [1/1] 0.00ns
:7  %tmp_13 = call i8 @_ssdm_op_BitConcatenate.i8.i6.i2(i6 %node_coordinates_0_load_2, i2 0)

ST_31: p_shl3_cast [1/1] 0.00ns
:8  %p_shl3_cast = zext i8 %tmp_13 to i13

ST_31: tmp_32 [1/1] 1.73ns
:9  %tmp_32 = add i13 %p_shl3_cast, %p_shl2_cast

ST_31: tmp_33 [1/1] 1.73ns
:10  %tmp_33 = add i13 %tmp_32, %tmp_11


 <State 32>: 2.71ns
ST_32: tmp_49_cast [1/1] 0.00ns
:11  %tmp_49_cast = sext i13 %tmp_33 to i64

ST_32: map_addr_1 [1/1] 0.00ns
:12  %map_addr_1 = getelementptr [2304 x i32]* %map_r, i64 0, i64 %tmp_49_cast

ST_32: stg_314 [1/1] 2.71ns
:13  store i32 2, i32* %map_addr_1, align 4

ST_32: stg_315 [1/1] 0.00ns
:14  br label %.preheader



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
